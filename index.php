<?php session_start(); 
//Запишем в куки с именем test значение 'Тест!':
	setcookie('test', 'Тест!');

		//Запишем куку на час (в часе 3600 секунд!):
		setcookie("test","Тест!", time() + 3600); 

		//Запишем куку на день (в сутках 3600*24 секунд!):
		setcookie("test","Тест!", time() + 3600*24); 
	
		//Запишем куку на месяц (в месяце 3600*24*30 секунд!):
		setcookie("test","Тест!", time() + 3600*24*30); 
	
		//Запишем куку на год (в году 3600*24*30*365 секунд!):
		setcookie("test","Тест!", time() + 3600*24*30*365); 
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
	<link rel="stylesheet" href="style.css">
</head>
<body>
    <h1 style="text-align:center">Туториал</h1>

    <?php
	//Выведем слово 'ср':
	$a = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
	echo $a[2];

    echo '<br>'.'<hr>';
   
	//Укажем ключи в явном виде:
	$a = [1=>'пн', 2=>'вт', 3=>'ср', 4=>'чт', 5=>'пт', 6=>'сб', 7=>'вс'];
	echo $a[1]; //выведет 'пн'

    echo '<br>'.'<hr>';
    // Синтаксис здесь такой: ключ, затем идет стрелка =>, а потом значение.
    //Ключи не обязательно должны быть числами, они могут быть и строками.
    // Сделаем массив, в котором ключами будут имена работников, а элементами - их зарплаты:
    
	$a = ['Коля'=>200, 'Вася'=>300, 'Петя'=>400];
	echo $a['Вася']; //выведет 300

    echo '<br>'.'<hr>';
// На самом деле нет необходимости расставлять ключи всем элементам - достаточно только первому элементу поставить ключ 1.
    
	//Укажем ключи в явном виде:
	$a = [1=>'пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];
	echo $a[3]; //выведет 'ср'

    echo '<br>'.'<hr>';

    	//Ключи могут быть строками. Создаём массив.
	$a1['Коля'] = 100;
	$a1['Вася'] = 200;
	$a1['Петя'] = 300;
	var_dump($a1); //с помощью var_dump убеждаемся в том, что $a – это массив

    echo '<br>'.'<hr>';


    //Кроме того, можно сделать так, что PHP сам добавит 
    //ключи (начиная с нуля и так далее).
    // Для этого мы оставим квадратные скобки пустыми:
    // $a[] = 1, а PHP сам добавит ключ. Пример:
  
	$a2[] = 100; //100 будет иметь ключ 0
	$a2[] = 200; //200 будет иметь ключ 1
	$a2[] = 300; //300 будет иметь ключ 2
	var_dump($a2); //массив $a будет иметь вид [0=>100, 1=>200, 2=>300]

    echo '<br>'.'<hr>';

    	//Многомерный массив студентов:
	$a3 = [
		'boys' => ['Коля', 'Вася', 'Петя'],
		'girls' => ['Даша', 'Маша', 'Лена'],
	];
    echo $a3['boys'][0]; // Так мы выведем Колю


	echo '<br>'.'<hr>';

	// Задачи 

	//Задача. Дан массив ['Привет, ', 'мир', '!'].
	// Необходимо записать в первый элемент 
	// этого массива слово 'Пока, ' (то есть вместо слова 'Привет, ' будет 'Пока, ').

	$ms = ['Привет', 'мир', '!'];
	$ms[0] = 'Пока';
	var_dump($ms);


	echo '<br>'.'<hr>';

	// Задача. Создайте массив $arr с элементами 1, 2, 3, 4, 5 двумя различными способами.

	$arra = [1, 2, 3, 4, 5,];
	$arra2 = [ 1=>1, 2=>2, 3=>3, 4=>4, 5=>5,];

	var_dump($arra); 
	echo '<br>' ;
	var_dump($arra2);

	echo '<br>'.'<hr>';

// Задача.	Создайте массив $arr=['a', 'b', 'c', 'd'] и с его помощью выведите на экран строку 'a+b, c+d'.


$arr=['a', 'b', 'c', 'd'];


$empy = $arr[0].' + '.$arr[1].' , '.$arr[2].' + '.$arr[3]; 
echo $empy;

echo '<br>'.'<hr>';

// Задача.  Создайте массив $arr с элементами 2, 5, 3, 9.
// Умножьте первый элемент массива на второй, а третий элемент на четвертый.
// Результаты сложите, присвойте переменной $result. Выведите на экран значение этой переменной.

$arr2 = [2, 5, 3, 9];
$result2 = $arr2[0]*$arr2[1] + $arr2[2]*$arr2[3];
echo $result2;

echo '<br>'.'<hr>';

//  Заполните массив $arr числами от 1 до 5. Не объявляйте массив, а просто заполните его присваиванием $arr[] = новое значение.

$ari[] = 1;
$ari[] = 2;
$ari[] = 3;
$ari[] = 4;
$ari[] = 5;

var_dump($ari);

echo '<br>'.'<hr>';


//  Создайте двухмерный массив. Первые два ключа - это 'ru' и 'en'. 
//Пусть первый ключ содержит элемент, являющийся массивом названий дней недели по-русски,
// а второй - по-английски. Выведите с помощью этого массива понедельник по-русски и среду по английски
// (пусть понедельник - это первый день).

$sheldue = [
	'ru' => [ 1=> 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье'],
	'en' => [ 1=> 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
];

echo $sreda = $sheldue['ru'][3].'<br>'.$sheldue['en'][4];

echo '<br>'.'<hr>';



// 4 Работа с конструкциями if-else, switch-case в PHP
echo '<h2>Работа с конструкциями if-else, switch-case в PHP</h2>';



//  Проверка на пустоту или 0 выполняется с помощью функции empty():

	$a = null;
	//Если $a пустое, то...
	if (empty($a)) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Верно!'

	echo '<br>';

	$a = 0;
	//Если $a пустое, то...
	if (empty($a)) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Верно!'


	echo '<br>';


	$a = '';
	//Если $a пустое, то...
	if (empty($a)) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Верно!'

	echo '<br>';

	$a = 'hi';
	//Если $a пустое, то...
	if (empty($a)) echo 'Верно!'; else echo 'Неверно!'; 


	echo '<br>'.'<hr>';

	//  Аналогом empty является функция isset. 
	//Она проверяет существует ли переменная (то есть то, что она не равна null) :

		$a = 'hello';
		//Если $a существует, то...
		if (isset($a)) echo 'Верно!'; else echo 'Неверно!';

		echo '<br>';


	//	Пусть переменную $asa3 вообще не определяли выше в коде
	//	(это все равно, что присвоить ей null).

	//	Если $asa3 существует, то...
	
	   if (isset($asa3)) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Неверно!'



	   // Несколько условий сразу: or и and
	//Вместо and можно писать &&, а вместо or - ||.

	//  конструкцию $a == true можно заменить на более простую:
	// вместо if ($a == true) написать if ($a) и она будет работать аналогично.

	echo '<h2>Смыслоразделитель</h2>';

	$a = true;
	//Если $a равно true, то...
	if ($a) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Верно!', так как $a равно true
	
	echo '<br>';
	
	$a = true;
	//Если $a НЕ true (то есть false!), то...
	if (!$a) echo 'Верно!'; else echo 'Неверно!'; //выведет 'Неверно!', так как $a равно true

	echo '<hr>';

		//Данное выражение всегда будет выводить 'Верно'
		if (true) echo 'Верно!'; else echo 'Неверно!','<br>';

		//Данное выражение всегда будет выводить 'Неверно'
		if (false) echo 'Верно!'; else echo 'Неверно!','<br>';
	
		//Данное выражение всегда будет выводить 'Неверно'
		if (!true) echo 'Верно!'; else echo 'Неверно!','<br>';
	 
		//Данное выражение всегда будет выводить 'Верно'
		if (!false) echo 'Верно!'; else echo 'Неверно!','<br>';



		echo '<h2>Работа вместе с HTML</h2>';	
		$a = true;
		if ($a) {
			//Данный HTML код будет виден на экране только если $a равно true
			echo '<p>Здесь выведем какой-то HTML!</p>';
		}

		echo '<h2>Вложенные if</h2>';	

		$a = -35;
		if (empty($a)) { //если переменная $a пуста
			echo 'Введите $a!';
		} else { //если переменная $a НЕ пуста
			if ($a > 0) { //спрашиваем, больше ли нуля переменная $a
				echo 'Больше нуля!'; 
			} else {
				echo 'Меньше нуля!'; 
			}
		}
		echo '<hr>';

		// д/з
	//	Если переменная $a больше 2-х и меньше 11-ти, 
	//или переменная $b больше или равна 6-ти и меньше 14-ти,
	// то выведите 'Верно', в противном случае выведите 'Неверно'.


$a = 12;
$b = 7;

if ($a >= 2 AND $a <= 11 OR $b >= 6 AND $b < 14) {
	echo 'Верно';
} else {
  echo 'Неверно';
}

	echo '<hr>';

	//  Переменная $num может принимать одно из значений: 
	//1, 2, 3 или 4. Если она имеет значение '1', то в переменную 
	//	$result запишем 'зима', если имеет значение '2' – 'лето' и так далее.
	// Решите задачу через switch-case.

	$num = 2;
	switch( $num ){
		case 1:
		$result = 'зима';
		break;

		case 2:
		$result = 'весна';
		break;

		case 3:
		$result = 'лето';
		break;

		case 4:
		$result = 'осень';
		break;
	}
	echo $result;

	echo '<hr>';

	//  В переменной $day лежит какое-то число из интервала от 1 до 31.
	// Определите в какую декаду месяца попадает это число (в первую, вторую или третью).


	$day = 1;

	if ($day > 0 AND $day <= 10 ) {
		$dacade = 'first';
	} elseif ($day > 10 AND $day <= 20 ) {
		$dacade = 'second';
	} elseif ($day > 20 AND $day <= 31 ) {
		$dacade = 'therd';
	} else {
		$dacade = 'Неверное значение';
	}

	echo $dacade;

	echo '<hr>';

	//  В переменной $month лежит какое-то число из интервала от 1 до 12.
	// Определите в какую пору года попадает этот месяц (зима, лето, весна, осень).

	$month = 11;

	if ($month >= 1 AND $month <= 2 OR $month == 12) {
		$seeson = 'Зима';
	}
	elseif ($month >= 3 AND $month <= 5) {
		$seeson = 'Весна';
	}
	elseif ($month >= 6  AND $month <= 8) {
		$seeson = 'Лето';
	}
	elseif ($month >= 9 AND $month <= 11) {
		$seeson = 'Осень';
	} else {
		$seeson = 'Ошибка';
	}

	echo $seeson; 

	echo '<hr>';


	//	В переменной $year хранится год. Определите, является ли он високосным 
	//(в таком году есть 29 февраля). Год будет високосным в двух случаях:
	// либо он делится на 4, но при этом не делится на 100, либо делится на 400.
	// Так, годы 1700, 1800 и 1900 не являются високосными,
	// так как они делятся на 100 и не делятся на 400. 
	//Годы 1600 и 2000 - високосные, так как они делятся на 400.

	$year = 2029;

	if ($year % 4 == 0 AND $year % 100 != 0 OR $year % 400 == 0 ) {
		$resultYear = 'Високосный';
	} else {
		$resultYear = 'Не високосный';
	}

	echo $resultYear;

	echo '<hr>';


	//  Дана строка с символами, например, 'abcde'.
	// Проверьте, что первым символом этой строки является буква 'a'. 
	//Если это так - выведите 'да', в противном случае выведите 'нет'.


	$str = 'abcde';
	if ($str[0] == 'a') {
		echo 'да';
	} else {
		echo 'нет';
	}
	echo '<hr>';

	// Дана строка из 6-ти цифр. Проверьте, что сумма первых трех цифр 
	// равняется сумме вторых трех цифр. Если это так - выведите 'да',
	// в противном случае выведите 'нет'.

	$str = '123412';
	$strNumber0 = (int)$str[0]; // Преобразую строку в число
	$strNumber1 = (int)$str[1]; // Преобразую строку в число
	$strNumber2 = (int)$str[2]; // Преобразую строку в число
	$strNumber3 = (int)$str[3]; // Преобразую строку в число
	$strNumber4 = (int)$str[4]; // Преобразую строку в число
	$strNumber5 = (int)$str[5]; // Преобразую строку в число

	$firstThree = $strNumber0 + $strNumber1 + $strNumber2;  // складываю числа
	$lastThree = $strNumber3 + $strNumber4 + $strNumber5;  // складываю числа
	if ($firstThree == $lastThree) {
		echo 'Сумма первых трёх и последних трёх чисел равна';
	} else {
		echo 'Сумма первых трёх и последних трёх чисел не равна';
	}

	echo '<hr>';


//           Работа с циклами foreach, for, while в PHP
  
$mass = [1, 2, 3, 4, 5];

foreach ($mass as $aloe) {
	echo $aloe*$aloe.'<br>';
}

echo '<br>';

	//Дан ассоциативный массив $arr:
	$arr = ['a'=>1, 'b'=>2, 'c'=>3, 'd'=>4, 'e'=>5];
	foreach ($arr as $key=>$elem) {
		/*
			В переменной $elem будут лежать элементы массива
			сначала '1, потом 2 и так далее,
			а в переменной $key будут лежать ключи массива
			сначала 'a', потом 'b' и так далее:
		*/
		echo $key.'-'.$elem.'<br>'; //выведет: 'a-1', 'b-2', 'c-3' и так далее...
	}

	echo '<hr>';

	// А вот если после ) поставить точку с запятой - цикл закроется
	// и следующая строка в него не попадет, получится так называемый 
	// цикл без тела, который в нашем случае просто прокрутится и в результате изменит значение переменной $i:

	for ($i = 0; $i < 10; $i++); //<--- точка с запятой есть
	echo $i; //выведет 10
	echo '<hr>';
	
	// Если нам необходимо выполнить несколько команд в круглых скобках - указываем их через запятую:
	echo 'несколько команд в цикле';
	echo '<br>';
	
	for ($i = 0, $j = 2; $i < 10; $i++, $j++,  $i = $i + $j) {

	}

	// дз
	echo '<h2>Домашняя работа</h2>';

	//  Дан массив с элементами 'html', 'css', 'php', 'js', 'jq'.
	// С помощью цикла foreach выведите эти слова в столбик.

	$skils = ['html', 'css', 'php', 'js', 'jq'];

	foreach ($skils as $sk) {
		echo $sk.'<br>';
	}

	echo '<hr>';
//	 Дан массив с элементами 1, 2, 3, 4, 5. С помощью цикла foreach найдите сумму 
// квадратов элементов этого массива. Результат запишите переменную $result.

$mass = [1, 2, 3, 4, 5];
$result = 0;

foreach ($mass as $sum) {
	$result = $result + $sum*$sum;
}
echo $result.'<br>';


//  Дан массив $arr с ключами 'Коля', 'Вася', 'Петя' и с элементами '200', '300', '400'.
// С помощью цикла foreach выведите на экран столбец строк такого формата: 'Коля - зарплата 2000 долларов.'.

$arr = ['Коля'=>2000, 'Вася'=>3000, 'Петя'=>4000];
foreach ($arr as $key=>$zp) {
	echo $key.' - '.'Зарплата '.$zp.' долларов.'.'<br>';
}
echo '<hr>';

// while, for
$i = 22;

while ($i <= 44) {
	echo $i.'<br>';
	$i++; // i после echo
}



// Сумма чисел от 1 до 100
echo '<hr>';

$s = 1;
$result = 0;
for ($s; $s <= 100; $s++) {
	
	$result = $result + $s; // Накопление должно быть внутри цикла
}
echo $result;  // вывод должен быть снаружи цикла
echo '<hr>';

// Дан массив с элементами 2, 5, 9, 15, 0, 4. С помощью цикла foreach и оператора if 
// выведите на экран столбец тех элементов массива, которые больше 3-х, но меньше 10.

$mass = [2, 5, 9, 15, 0, 4];

foreach ($mass as $i) {
	if ($i > 3 AND $i < 10) {
		echo $i.'<br>';
	}
	$i++;
}
echo '<hr>';
 //Дан массив с числами. Числа могут быть положительными и отрицательными.
 // Найдите сумму положительных элементов этого массива.

 $mask = [1, 2, 3, -1, -2, -4];
$summa = 0;
 foreach ($mask as $i) {
	 if ($i > 0) {
		 $summa = $summa + $i;
	 }
	 $i++;
 }

 echo $summa;
 echo '<hr>';

 // Дан массив с элементами 1, 2, 5, 9, 4, 13, 4, 10. 
 // С помощью цикла foreach и оператора if проверьте есть ли 
 // в массиве элемент со значением, равным 4.
 // Если есть - выведите на экран 'Есть!' и выйдите из цикла. Если нет - ничего делать не надо.

$el = [1, 2, 5, 9, 0, 13, 4, 10];

foreach ($el as $i) {
	if ($i == 4) {
		echo 'Есть!';
		break;
	}
	$i++;
}
echo '<hr>';

//  Дан массив числами, например: ['10', '20', '30', '50', '235', '3000'].
// Выведите на экран только те числа из массива, которые начинаются на цифру 1, 2 или 5.

$dubleMass = ['10', '20', '30', '50', '235', '3000'];

foreach ($dubleMass as $i) {
	if ($i[0] == 1 OR $i[0] == 2 OR $i[0] == 5) {
		echo $i.'<br>';
		}
		$i++;
	}



	//  Дан массив с элементами 1, 2, 3, 4, 5, 6, 7, 8, 9. С помощью цикла foreach создайте строку '-1-2-3-4-5-6-7-8-9-'.

	$chisla = [1, 2, 3, 4, 5, 6, 7, 8, 9];
	$chisla[0] = '-1'; // мой костыль

	foreach ($chisla as $i) {
		echo $i.'-';
		$i++;
	}
	
	echo '<hr>';

	//  Составьте массив дней недели. С помощью цикла foreach выведите все дни недели, а выходные дни выведите жирным.

	$days = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье'];
	
	
	foreach ($days as $i) {

		if ($i== 'Суббота' OR $i== 'Воскресенье') {
			 $i = "<span class='bold'>$i</span>";    // в двойных кавычках можно писать  php код
		
		}
		echo $i.' ';
	}
	
	$i++;
	echo '<hr>';

	// Задача 17. С помощью цикла for заполните массив числами от 1 до 100. То есть у вас должен получится массив [1, 2, 3... 100].



	for ($i = 1; $i <= 100; $i++) {
		$mass_2[] = $i;
		
	}

	var_dump($mass_2);

	echo '<hr>';

	//  Дан массив $arr. С помощью цикла foreach запишите английские названия в массив $en, а русские - в массив $ru.

	$arr = ['green'=>'зеленый', 'red'=>'красный', 'blue'=>'голубой'];

	foreach ($arr as $key=>$i) {
		$ru[] = $i;
		$en[] = $key;
		
	}

	$i++;
	var_dump($ru) ; //  выводим русские слова в массиве
	echo '<br>';
	var_dump($en) ; //  выводим английские ключи


	/*   // Второй способ
	var_dump($ru) ; //  выводим русские слова в массиве

	echo '<hr>';
	
	$en = array_keys($arr); // array_keys - возвращает ключи массива
	var_dump($en); // выводим английские ключи в массиве

	echo '<hr>';

	echo $en[1]; // проверка $en на бытие массивом
	*/


	echo '<hr>';
	//  Дано число $num=1000. Делите его на 2 столько раз,
	// пока результат деления не станет меньше 50. Какое число получится? Посчитайте количество итераций, 
	//необходимых для этого (итерация - это проход цикла). Решите задачу сначала через цикл while, а потом через цикл for.

	
	// while
	$num = 1000;
	while ($num > 50 ) {

			$num = $num / 2;
			echo $num.' ';
	}

	echo '<br>';

	// for

	$num = 1000;
	for ($num; $num > 50; $num = $num/2) {

		echo $num.' ';
	}

	echo '<hr>';
	///////////////////////////////////   Повторил  /////////////////////////////


	// Работа с математическими функциями

// Функция abs вычисляет модуль числа, то есть из отрицательного делает положительное.	
echo abs(-15); // станет  15
echo '<br>';

// Функция pow возводит число в заданную степень.
echo pow(2, 3); // Возведёт 2 в третью степень
echo '<br>';

// Функция sqrt находит квадратный корень числа.
echo sqrt(16); //  4
echo '<br>';

// Функция max находит самое большое число из переданных ей параметрами 
//или самое большое число среди элементов массива.

echo max(1, 2, 3); // 3
echo max( [1, 2, 3] ); // 3
echo '<br>';

// min - находит минимально число

// round - округляет числа

echo round(3.4).'<br>'; // округлится до 3
echo round(3.5).'<br>'; // округлится до 4
echo round(12.5346325235, 2).'<br>'; // обрежет до двух знаков после запятой 12,53
echo round(12456.78, -1).'<br>';  // округление до десятков  12460
echo round(12456.78, -2).'<br>';  // округление до сотен  12500
echo round(12456.78, -3).'<br>';  // округление до тысяч  12000

// ceil - округляет дробное число в большую сторону

echo ceil(5.1); //   6
echo '<br>';

// Функция floor округляет дробь в меньшую сторону.
echo floor(4.9);  // 4
echo '<br>';

// Функция mt_rand генерирует случайное целое число в заданном промежутке.
// mt_rand(с какого числа, до какого числа);




// генератор чисел от 1 до 100
?>



	<form method="post">
	<input type="submit" name="test" id="test" value="RUN" /><br/>
	</form>


<?php

function testfun()
{
 echo mt_rand(1, 100);
}

if(array_key_exists('test',$_POST)){
testfun();
}

echo '<br>';

// Функция strlen возвращает длину строки (количество символов в строке).
// для кириличной строки нужно использовать  mb_strlen
echo strlen('abcd').' - длинна строки';
echo '<br>';


// Функция strtolower преобразовывает строку в нижний регистр
echo strtolower('ABCDE');
echo '<br>';
// Функция strtoupper преобразовывает строку в верхний регистр.
// Функция ucfirst преобразует первый символ строки в верхний регистр. Не работает с кириллицей.
// Функция lcfirst преобразует первый символ строки в нижний регистр. Не работает с кириллицей.
// Функция ucwords преобразует первый символ каждого слова в строке в верхний регистр. Не работает с кириллицей.
// Функция trim удаляет пробелы с начала и конца строки. Может также удалять другие символы, если их указать вторым параметром.
// Давайте удалим слеши по краям строки:
echo trim('/abcde/', '/').' - слеши удалены';

echo '<hr>';

//  Практика

//  Массив случайных чисел

	//Переменная $i нужна, чтобы цикл сделал 30 итераций (проходов)
	for ($i = 1; $i <= 30; $i++) {
		$randMass[] = mt_rand(1, 10);
	}

	var_dump($randMass);

	/*
		Пообновляйте страницу - 
		вы увидите как меняется массив,
		так как он заполняется случайными числами.
	*/

	echo '<hr>';
	//  Даны переменные $a и $b. Проверьте, что $a делится без остатка на $b.
	// Если это так - выведите 'Делится' и результат деления, иначе выведите 
	//'Делится с остатком' и остаток от деления. Показать решение.

	$a = 9;
	$b = 3;

	if ($a % $b == 0) {
		echo 'делится!';
	} else {
		echo $a % $b;
	}

	echo '<hr>';

  // Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. 
  //Найдите корень из суммы квадратов его элементов. Для решения воспользуйтесь циклом foreach.

  $amaSiv = [4, 2, 5, 19, 13, 0, 10];
	$result = 0;
  foreach ($amaSiv as $i) {
	$result = $result + pow($i, 2);
	
	
  }
 
  $i++;

  echo sqrt($result); // результат 
  echo '<hr>';

  // Округление 

  echo sqrt(379).'<br>';
  $per = sqrt(379);
  echo round( $per, 0).'<br>'; // округляю до целых
  echo round( $per, 1).'<br>'; // десятых 
  echo round( $per, 2).'<br>'; // Сотых
  echo '<hr>';

  //  Найдите квадратный корень из 587. Округлите результат в большую и меньшую сторону,
  // запишите результаты округления в ассоциативный массив с ключами 'floor' и 'ceil'.

  $vasa = sqrt(587).'<br>';

  $floor = floor($vasa);
  $ceil = ceil($vasa);

  echo $floor.'<br>'; 
  echo $ceil ;

  echo '<br>'; 

  $mass = ['floor' => $floor, 'ceil' => $ceil];
  var_dump($mass) ;
  echo '<hr>';

  //  Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.

 echo min(4, -2, 5, 19, -130, 0, 10);
 
 echo '<br>'; 
 echo max(4, -2, 5, 19, -130, 0, 10);
 echo '<hr>';
 

  //Заполните массив 10-ю случайными числами.
  
  for ($i = 1; $i <= 10; $i++) {
	  $qwert[] = mt_rand(1, 999);
  }
  var_dump($qwert);
  echo '<hr>';

 // Дан массив в числами, к примеру [1, 2, -1, -2, 3, -3]. Создайте из него новый массив так,
 // чтобы отрицательные числа стали положительными,
 // то есть у нас должен получиться такой массив: [1, 2, 1, 2, 3, 3].

 $mess = [1, 2, -1, -2, 3, -3];

 foreach ($mess as $i) {
	
	if ($i < 0) {
	$i = abs($i);
	}
	$poradok[] = $i; 
 }
 
 var_dump($poradok);

$i++;

echo '<hr>';

//  Дано число, например 30. У этого числа есть делители - числа, на которое оно делится без остатка.
// Делители числа 30 - это 1, 2, 3, 5, 6, 10, 15, 30. Задача: сделайте массив делителей нашего числа.
// Число может быть любым, не обязательно, 30.

$chislo = 50;

for ($i = 1; $i <= $chislo; $i++) {
	if ($chislo % $i == 0 ) {
		$noviy[] = $i;
	}
}

var_dump($noviy);
echo '<hr>';

//  Дан массив [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. Узнайте, сколько первых элементов
// массива нужно сложить, чтобы сумма получилась больше 10.

$massiv = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
$result = 0;

foreach ($massiv as $i) {
$result = $result + $i;

	if ($result > 10) break; 
}

echo $i;  // результат = нужно сложить 5 чисел
$i++;

echo '<hr>';
echo $result;


echo '<hr>';
                             // Урок 7. работа со строковыми функциями

 // регистр символов
echo strtoupper('php').'<br>'; // преобразует символы в заглавные
echo strtolower('PHP').'<br>'; // преобразует символы в строчные
echo ucfirst('london').'<br>'; // первую букву делает заглавной
echo lcfirst('London').'<br>'; // первую букву делае строчной
echo ucwords('london is the capital of great britain').'<br>'; //  первую букву всех слов преобразует в большую
echo ucfirst(strtolower('LONDON')).'<br>'; // преобразуем буквы в строчные, а первую в заглавную

// Работа с strlen

echo strlen('html css php '); // длинна строки включая пробелы
echo '<hr>';
// Дана переменная $password, в которой хранится пароль пользователя.
// Если количество символов пароля больше 5-ти и меньше 10-ти, то выведите
// пользователю сообщение о том, что пароль подходит, иначе сообщение о том,
// что нужно придумать другой пароль.

$password = '123456789Nagibator3000';

if (strlen($password) > 5 AND  strlen($password) < 10) {
	echo 'Пароль подходит';
} else {
	echo 'придумайте новый пароль';
}
echo '<hr>';
// Работа с substr

echo substr('html css php', 0, 4).'<br>';  // вырежет html из строки (с нулевого )
echo substr('html css php', 5, 3).'<br>'; 
echo substr('html css php', 9, 3).'<br>'; 

//   Дана строка. Проверьте, что она начинается на 'http://'. Если это так, выведите 'да', если не так - 'нет'.
echo '<hr>';

$url = 'http://23413323hvkshvk';

if (substr($url, 0, 7) == 'http://') {
	echo 'да';
} else {
	echo 'нет';
}
echo '<hr>';

//  Дана строка. Если в этой строке более 5-ти символов - вырежите из нее первые 5 символов,
// добавьте троеточие в конец и выведите на экран.
 // Если же в этой строке 5 и менее символов - просто выведите эту строку на экран.

 $str = '123456';
if (strlen($str) > 5) {
	echo substr($str, 0, 5).'...';
} else {
	echo '$str';
}
echo '<hr>';

//  str_replace(что меняем, на что меняем, где меняем);

echo str_replace('.', '-', '31.12.2013'); // меняю точки на тире
echo '<hr>';

//  Дана строка $str. Замените в ней все буквы 'a' на цифру 1, буквы 'b' - на 2, а буквы 'c' - на 3.
$str = 'abcdefg';
echo str_replace(['a', 'b', 'c'], [1,2,3], $str);
echo '<hr>';

 // strpos(где ищем, что ищем, откуда искать);

 strpos('abc abc abc', 'b');  // позиция превого b = 1
 echo strpos('abc abc abc', 'b', 7).'<hr>'; // позиция последнего b = 9
 echo strpos('aaa aaa aaa aaa aaa', ' ', 4);  // позиция второго пробела = 7
 echo '<hr>';

 // Проверьте, что в строке есть две точки подряд. Если это так - выведите 'есть', если не так - 'нет'.

 $str = 'aaa aaa.. aaa';

 if (strpos($str, '..')) {
	 echo 'есть';
 } else {
	echo 'нету';
 }
 echo '<hr>';

 // Функция explode разбивает строку в массив по определенному разделителю.
 // explode(разделитель, строка);

 $str = 'html css php';
 
 var_dump( explode(' ', $str)); // тут разделитель это пробел

 // Функция implode сливает массив в строку с указанным разделителем.
// implode(разделитель, массив);

$arr = ['a', 'b', 'c', 'd', 'e'];
echo implode('-', $arr); // a-b-c-d-e
echo '<hr>';

// str_split разбивает строку в массив

 var_dump( str_split('123456789', 2)); // разбивает по два элемента в ключ

 // str_shuffle перемешает символы в случайном порядке
 echo '<hr>';
 echo str_shuffle('abcdefxyz');
 echo '<hr>';

 //  Создайте строку из 6-ти случайных маленьких латинских букв так,
 // чтобы буквы не повторялись. Нужно сделать так, чтобы в нашей строке
 // могла быть любая латинская буква, а не ограниченный набор

 $nabor = 'qwertyuiopasdfghjklzxcvbnm';
 echo substr( str_shuffle($nabor), 0, 6);

 echo '<hr>';

 // Функция str_repeat повторяет строку заданное количество раз.
 // str_repeat(строка, сколько раз повторить);
 echo str_repeat('x', 5);
 echo '<hr>';

// Нарисуйте пирамиду, как показано на рисунке, только у вашей пирамиды должно быть 9 рядов, а не 5.
// Решите задачу с помощью одного цикла и функции str_repeat.
for ($times = 1; $times <= 9; $times++) {
$x = str_repeat('x', $times);
echo $x.'<br>';
}
echo '<hr>';

// Нарисуйте пирамиду, как показано на рисунке. Решите задачу с помощью одного цикла и функции str_repeat.

for ($times = 1; $times <= 9; $times++) {
	$x = str_repeat($times, $times);
	echo $x.'<br>';
	}
	echo '<hr>';


	// Функция htmlspecialchars позволяет вывести теги в браузер так, чтобы он не считал их командами, а выводил как строки.


	echo htmlspecialchars('<b>жирный текст</b>');

	echo '<hr>';

	// strip_tags  удалит теги кроме разрешённых
	// strip_tags(строка, [разрешенные теги]);
	

//	Функция chr находит символ по его ASCII коду.

echo chr(97); // это код символа 'a'
echo '<hr>';
// Большие латинские буквы имеют диапазон 65-90, а маленькие - 97-122.
/// То есть между ними есть дыра. Давайте получим случайный символ маленькую или большую латинскую букву.
// Для этого с помощью range сформируем 2 массива: первый с числами от 65 до 90, 
//а второй с числами от 97 до 122. Объединим их вместе с помощью array_merge и
// затем выведем случайный элемент этого массива с помощью array_rand:

$codes = array_merge(range(65, 90), range(97, 122));
echo chr($codes[array_rand($codes)]);
echo '<hr>';


// Функция strchr находит первое вхождение подстроки в строку и возвращает часть строки
// начиная этого места до конца строки. Если второй параметр состоит более чем из одного
// символа, используется только первый символ.

// strchr(где ищем, что ищем);

//  Дана строка 'ab-cd-ef'. С помощью функции strchr выведите на экран строку '-cd-ef'.

echo strchr('ab-cd-ef', 'c'); // вернёт строку начиная с 'с' включительно
echo '<hr>';

// stristr  - ищет вхождение в строку из нескольих символов а не из одного

echo stristr('ab--cd--ef', '--');
echo '<hr>';
// Задачи

//  Преобразуйте строку 'var_test_text' в 'varTestText'. Скрипт, конечно же, должен работать с любыми аналогичными строками.

$str = 'var_test_text';

echo  ucwords(lcfirst(ucwords(str_replace('_', ' ', $str)))); // заменил тире на пробелы. сделал первые буквы заглавными. Перевую букву первого слова сделал строчной. А потом ещё раз сделал

echo '<hr>';






                                        // 8  Функции работы с массивами

// как создать массив ? очень просто!

$arr = range(1, 100); // создаём
var_dump($arr) ;  // выводим 

echo '<br>';


// найти сумму элементов массива

echo array_sum($arr); // 5050
echo '<br>';


 // array_map применяет функцию ко всем элементам массива и возвращает его

$arr = ['a', 'b', 'c', 'd', 'e'];
$arr = array_map('strtoupper', $arr); 
var_dump($arr);

echo '<br>';

// подсчитать кол-во элементов массива

$arr = ['a', 'b', 'c', 'd', 'e'];
$kol_Vo = count($arr);
echo $kol_Vo;

echo '<hr>';
// Дан массив с числами. Проверьте, что в нем есть элемент со значением 3.  1 - найдено, 0 - не найдено
// in_array(что искать, в каком массиве);

$arr = [1, 2, 45, 32, 25, 5, 6];

echo in_array(3, $arr);

echo '<hr>';

echo array_product($arr).' - произведение элементов массива'; // array_product - произведение элементллв массива
echo '<hr>';

//  Дан массив $arr. С помощью функций array_sum и count найдите среднее 
//арифметическое элементов (сумма элементов делить на их количество) данного массива.

$arr = [2, 2, 2, 2, 2, 2, 2];

echo $result = array_sum($arr) / count($arr);
echo '<hr>';

//  Создайте массив, заполненный буквами от 'a' до 'z'.

$arr = range('a', 'z');
var_dump($arr);

echo '<hr>';

//  Создайте строку '1-2-3-4-5-6-7-8-9' не используя цикл.

$arr = range(1, 9); // создаём массив с цифрами
echo implode('-', $arr); // превращаем массив в строку с указаным разделителем
echo '<hr>';

//  Найдите сумму чисел от 1 до 100 не используя цикл.

echo array_sum( range(1, 100));
echo '<hr>';
//  Найдите произведение чисел от 1 до 10 не используя цикл.

echo array_product(range(1, 10));
echo '<hr>';

// Функция array_merge сливает два и более массивов вместе. Если в сливаемых массивах
// встречаются одинаковые ключи - останется только один из таких элементов.

//  Даны два массива: первый с элементами 1, 2, 3, второй с элементами 'a', 'b', 'c'.
// Сделайте из них массив с элементами 1, 2, 3, 'a', 'b', 'c'.

$arr1 = [1, 2, 3];
$arr2 = ['a', 'b', 'c'];

$result = array_merge($arr1, $arr2);
var_dump($result);

// Функция array_slice отрезает и возвращает часть массива. При этом сам массив не меняется. 
// Первым параметром указывается массив для разрезания. Вторым параметром указывается, 
// с какого элемента начинать отрезание, а третьим - сколько элементов отрезать.
// Четвртым сохранять ли ключи
// Третий параметр может быть отрицательным - в этом случае отсчет начнется с конца 
//(-1 - последний элемент, -2 - предпоследний и так далее). Третий параметр можно вообще не указывать -
// в этом случае массив отрежется до самого конца.


// array_slice(массив, откуда отрезать, [сколько], [сохранять ключи = true]);

//////////////////////////////////////



// Давайте вырежем элементы со второго (имеет номер 1), 2 штуки, а в замен вставим элементы 1, 2, 3:

$arr = ['a', 'b', 'c', 'd', 'e'];
	
$result = array_splice($arr, 1, 2, [1, 2, 3]);
var_dump($result);

// Результат выполнения кода:  ['b', 'c']

// При этом массив $arr станет выглядеть так:  ['a', 1, 2, 3, 'd', 'e']

///////////////////////////////////


// Давайте вообще ничего не будем вырезать, а просто вставим элементы 1, 2, 3 начиная с позиции 1.
//  Для этого третий параметр ставится в ноль:

$arr = ['a', 'b', 'c', 'd', 'e'];
	
$result = array_splice($arr, 1, 0, [1, 2, 3]);
var_dump($result);
echo '<hr>';
// Результат выполнения кода: []

//При этом массив $arr станет выглядеть так: ['a', 1, 2, 3, 'b', 'c', 'd', 'e']



//////////////////////////

//  Дан массив [1, 2, 3, 4, 5]. С помощью функции array_splice преобразуйте массив в [1, 4, 5].

$arr = [1, 2, 3, 4, 5];

array_splice($arr, 1, 2);
var_dump($arr);
echo '<hr>';


//  Дан массив [1, 2, 3, 4, 5]. С помощью функции array_splice сделайте из него массив 
// [1, 2, 3, 'a', 'b', 'c', 4, 5].

$arr = [1, 2, 3, 4, 5];

$arrNov = array_splice($arr, 3, 0, ['a', 'b', 'c']); // добавляю a b с между 3 и 4  //  здесь результатом будет []

var_dump($arr);  // а здесь  [1, 2, 3, 'a', 'b', 'c', 4, 5]
echo '<hr>';

//  Дан массив [1, 2, 3, 4, 5]. С помощью функции array_splice сделайте из него массив 
 // [1, 'a', 'b', 2, 3, 4, 'c', 5, 'e'].

 $arr = [1, 2, 3, 4, 5];
 array_splice($arr, 1, 0, ['a', 'b']);
 array_splice($arr, 6, 0, ['c']);
 array_splice($arr, 9, 0, ['e']);

var_dump($arr); 
echo '<hr>';
	// под каким ключом добавить элемент, то число и указывается вторым параметром.

	////////////////////////


//	Функция array_keys получает ключи массива и записывает их в новый массив.  array_keys(массив);

// Функция array_values выбирает все значения из массива. array_values(массив);



 // Дан массив 'a'=>1, 'b'=>2, 'c'=>3'. Запишите в массив $keys ключи из этого массива, а в $values – значения.


$acha = ['a'=>1, 'b'=>2, 'c'=>3];

$Akeys =  array_keys($acha);
var_dump($Akeys);

echo '<hr>';


$acha = ['a'=>1, 'b'=>2, 'c'=>3];

$Avalues =  array_values($acha);
var_dump($Avalues);

echo '<hr>';


// Функция array_combine осуществляет слияние двух массивов в один ассоциативный.
// Первым параметром функция принимает массив будущих ключей, а вторым - массив будущих значений.
// array_combine(массив ключей, массив значений);


// Даны два массива: ['a', 'b', 'c'] и [1, 2, 3]. Создайте с их помощью массив 'a'=>1, 'b'=>2, 'c'=>3'.

$arr1 = ['a', 'b', 'c'];
$arr2 = [1, 2, 3];

$result = array_combine($arr1, $arr2);
var_dump($result);
echo '<hr>';



// Функция array_flip производит обмен местами ключей и значений массива.   array_flip(массив);


// Дан массив 'a'=>1, 'b'=>2, 'c'=>3. Поменяйте в нем местами ключи и значения.

$arr = ['a'=>1, 'b'=>2, 'c'=>3];

var_dump( array_flip($arr));
echo '<hr>';

// Функция array_reverse переворачивает массив в обратном порядке. Первым параметром передается массив,
// а вторым - сохранять ключи при перестановке элементов или нет (true - да, false - нет).
// Второй параметр указывать необязательно. В таком случае по умолчанию вторым параметром
// является false. Строковые ключи всегда сохраняются, независимо от значения этого параметра.

// array_reverse(массив, [сохранять ли ключи]);

$arr = [5, 3, 1];

var_dump(array_reverse($arr));
echo '<hr>';


//Функция array_search осуществляет поиск значения в массиве и возвращает ключ первого
// найденного элемента. Если такой элемент не найдет - вернет false. Третий параметр
// задает строгое сравнение по типу (как по ===). Если поставить true - он будет 
//сравнивать строго, а если false (по умолчанию) - то нет.

// array_search(что ищем, где ищем, [сравнивать по типу = false]);


 // Дан массив ['a', '-', 'b', '-', 'c', '-', 'd']. Найдите позицию первого элемента '-'.

 $arr = ['a', '-', 'b', '-', 'c', '-', 'd'];

echo array_search('-', $arr);  // результат 1 - ключ первого '-'
echo '<hr>';

 //Дан массив ['a', '-', 'b', '-', 'c', '-', 'd']. Найдите позицию первого элемента '-'
 // и удалите его с помощью функции array_splice.

 $arr = ['a', '-', 'b', '-', 'c', '-', 'd'];

 $result = array_splice($arr, array_search('-', $arr), 1 );   // вторым параметром указал поиск ключа 
 var_dump($arr);
 echo '<hr>';


 // Для сортировки массивов в PHP существует несколько функций: sort - по возрастанию элементов,
 // rsort - по убыванию элементов, asort - по возрастанию элементов с сохранением ключей, arsort
 // - по убыванию элементов с сохранением ключей, ksort - по возрастанию ключей, krsort 
 //- по убыванию ключей, usort - по функции по элементам, uasort - по функции по элементам
 // с сохранением ключей, uksort - по функции по ключам, natsort - натуральная сортировка.

 //Все эти функции изменяют сам массив - это значит, что результат не нужно никуда присваивать: поменяется сам массив.


 //  Дан массив '3'=>'a', '1'=>'c', '2'=>'e', '4'=>'b'. Попробуйте на нем различные типы сортировок.

 $arr = ['3'=>'a', '1'=>'c', '2'=>'e', '4'=>'b'];

sort($arr); // a b с e
rsort($arr); // e c b a
ksort($arr); // по возрастанию ключей
krsort($arr); // по возрастанию ключей
// uksort  - по ключам
// natsort  - натуралная сортировка
var_dump($arr);

echo '<hr>';
// Функция array_rand возвращает случайный ключ из массива.
// Первым параметром задается массив, а второй необязательный параметр указывает,
// сколько случайных ключей следует вернуть. Если он не указан - возвращается один ключ,
// а если указан - заданное количество ключей в виде массива.

// array_rand(массив, [сколько ключей выбрать]);

// Дан массив с элементами 'a'=>1, 'b'=>2, 'c'=>3. Выведите на экран случайный ключ из данного массива.

$arr = ['a'=>1, 'b'=>2, 'c'=>3];

echo array_rand($arr);
echo '<hr>';

//  Дан массив с элементами 'a'=>1, 'b'=>2, 'c'=>3. Выведите на экран случайный элемент данного массива.

$key = array_rand($arr); //  получаю случайных ключ
echo $arr[$key]; // вывовожу случайный элемент этого ключа
echo '<hr>';
//  Функция shuffle осуществляет перемешивание массива так, 
//чтобы его элементы шли в случайном порядке. При этом функция изменяет сам массив:
// это значит результат работы функции не нужно никуда присваивать - 
//изменения произойдут над самим массивом.

// shuffle(массив);

// Применение:

// Сделаем список , заполненный случайными числами от 1 до 10:

$arr = range(1, 10);
shuffle($arr);

echo '<ul>';
foreach ($arr as $elem) {
	echo '<li>'.$elem.'</li>';
}
echo '</ul>';

// Заполните массив числами от 1 до 25 с помощью range, а затем перемешайте его элементы в случайном порядке.

$arr = range(1, 25); // создаём массив
shuffle($arr);  // перемешиваем элементы
var_dump($arr);

echo '<hr>';

//  Создайте массив, заполненный буквами от 'a' до 'z' так, чтобы буквы шли в случайном порядке и не повторялись.

$arr = range('a', 'z');
shuffle($arr);
var_dump($arr);
echo '<hr>';


// Сделайте строку длиной 6 символов, состоящую из маленьких английских букв,
// расположенных в случайном порядке. Буквы не должны повторяться.

$arr = range('a', 'f');
shuffle($arr);
echo implode($arr); // превращаем массив в строку и выводим
echo '<hr>';

// Функция array_unique осуществляет удаление повторяющихся элементов (дублей) из массива.
// array_unique(массив);

// Дан массив с элементами 'a', 'b', 'c', 'b', 'a'. Удалите из него повторяющиеся элементы.

$arr = ['a', 'b', 'c', 'b', 'a'];
 var_dump(array_unique($arr));
 echo '<hr>';

 // Функция array_shift вырезает и возвращает первый элемент массива. При этом этот элемент исчезает из массива.
 // array_shift(массив);

 // Функция array_pop вырезает и возвращает последний элемент массива. При этом этот элемент исчезает из массива.
 // array_pop(массив);


 //  Дан массив с элементами 1, 2, 3, 4, 5. Выведите на экран его первый и последний элемент, 
 //причем так, чтобы в исходном массиве они исчезли.

 $arr = [1, 2, 3, 4, 5];
 $pervi = array_pop($arr);
 $vtoroi = array_shift($arr);
 var_dump($pervi.$vtoroi);
 echo '<br>';

 var_dump($arr);
 echo '<hr>';



 // Функция array_unshift добавляет элементы в начало массива. При этом переданный массив изменяется,
 // а функция возвращает новое количество элементов в массиве. Элементы для добавления перечисляются через запятую.


 // Функция array_push добавляет элементы в конец массива. При этом переданный массив изменяется,
 // а функция возвращает новое количество элементов в массиве. Элементы для добавления перечисляются через запятую.


 // Дан массив с элементами 1, 2, 3, 4, 5. Добавьте ему в начало элемент 0, а в конец - элемент 6.

 $arr = [1, 2, 3, 4, 5];

 array_unshift($arr, 0);
 array_push($arr, 6);

 var_dump($arr);
 echo '<hr>';

 // Дан массив с элементами 1, 2, 3, 4, 5, 6, 7, 8. С помощью цикла и функций array_shift
 // и array_pop выведите на экран его элементы в следующем порядке: 18273645.

 $arr = [1, 2, 3, 4, 5, 6, 7, 8];

 $str = '';
 foreach($arr as $i) {
		$str .= array_shift($arr); // накапливаем первый элемент
		$str .= array_pop($arr); //  к накопленному первому добавляем второй. К ним добавятся следующие два элемента и так далее
		$i++;
 }

 echo $str;
 echo '<hr>';

 // Функция array_pad дополняет массив определенным значением до заданного размера. 
 // Первым параметром функция принимает массив для заполнения, вторым параметром - 
 // до какого размера заполнить, третьим - чем заполнять.

 //Второй параметр можно делать отрицательным - в этом случае массив будет дополнятся элементами не с конца, а с начала.


 //  Дан массив с элементами 'a', 'b', 'c'. Сделайте из него массив с элементами 'a', 'b', 'c', '-', '-', '-'.

 $arr =['a', 'b', 'c'];

 var_dump(array_pad($arr, 6, '-')); // заполнить до 6 элементов, чёрточками
 echo '<hr>';

 // Функция array_fill создает массив, заполненный элементами с определенным значением.
  // array_fill(ключ первого элемента, сколько элементов, чем заполнять);


  // Давайте сделаем массив [['x', 'x', 'x'], ['x', 'x', 'x'], ['x', 'x', 'x']]:

  $arr = array_fill(0, 3, array_fill(0, 3, 'x'));
  var_dump($arr);
  // [['x', 'x', 'x'], ['x', 'x', 'x'], ['x', 'x', 'x']]
  echo '<hr>';

  // Функция array_chunk разбивает одномерный массив в двухмерный. 
  //Первым параметром она принимает массив, а вторым - количество элементов в каждом подмассиве.


  //  Создайте массив, заполненный целыми числами от 1 до 20.
  // С помощью функции array_chunk разбейте этот массив на 5 подмассивов ([1, 2, 3, 4]; [5, 6, 7, 8] и т.д.).

  $arr = range(1, 20);

  var_dump( array_chunk($arr, 5));
  echo '<hr>';

  // Функция array_count_values производит подсчет количества всех значений массива.
  // Возвращает ассоциативный массив, в котором ключами будут элементы массива, 
  //а значениями - их количество в массиве.  array_count_values(массив);


  $arr = ['a', 'a', 'a', 'b', 'b', 'c'];
  var_dump(array_count_values($arr));  // ['a'=>3, 'b'=>2, 'c'=>1]
  echo '<hr>';


  // Функция array_map применяет заданную функцию ко всем элементам массива и возвращает измененный массив.
  // Первым параметром функция принимает имя функции, а вторым - массив.
  // Можно передавать дополнительные массивы третьим и так далее параметрами.

  // array_map(имя функции в кавычках, массив, [еще массивы через запятую]);


  // Дан массив с элементами 1, 2, 3, 4, 5. Создайте новый массив, в котором будут лежать квадратные корни данных элементов.

  $arr = [1, 2, 3, 4, 5];

 $arr2 = array_map('sqrt', $arr);

 var_dump($arr2);
 echo '<hr>';

 //  Дан массив с элементами '<b>php</b>', '<i>html</i>'. Создайте новый массив, в котором из элементов будут удалены теги.
 $arr = ['<b>php</b>', '<i>html</i>'];
 $arr2 = array_map('strip_tags', $arr);

 var_dump($arr2);
 echo '<hr>';

 // Дан массив с элементами ' a ', ' b ', ' с '. Создайте новый массив, в котором будут данные элементы без концевых пробелов.
// trim - удаляет пробелы и другие элементы из начала и конца строки
 $arr =[' a ', ' b ', ' с '];

 $arr2 = array_map('trim', $arr);
 var_dump($arr2);
 echo '<hr>';


 // Функция array_intersect вычисляет пересечение массивов - возвращает массив из элементов, которые есть во всех массивах, переданных в функцию.
// array_intersect(массив, массив, массив...);

// Дан массив с элементами 1, 2, 3, 4, 5 и массив с элементами 3, 4, 5, 6, 7.
// Запишите в новый массив элементы, которые есть и в том, и в другом массиве.

$a = [1, 2, 3, 4, 5];
$b = [3, 4, 5, 6, 7];
  
$c = array_intersect($a, $b);
var_dump($c);   //     3/ 4 /5 
echo '<hr>';



// Функция array_diff() возвращает массив, состоящий из значений массива массив_1,
// которые отсутствуют в любом другом массиве, перечисленном в последующих аргументах.
// Обратите внимание, что ключи массивов сохраняются.

//Дан массив с элементами 1, 2, 3, 4, 5 и массив с элементами 3, 4, 5, 6, 7. 
// Запишите в новый массив элементы, которые не присутствуют в обоих массивах одновременно.


$a = [1, 2, 3, 4, 5];
$b = [3, 4, 5, 6, 7];
  
$c = array_diff($a, $b);   // веведу все, которые есть в $a , но отсутствуют в  $b
var_dump($c);   //     1/ 2 
echo '<br>';
$d = array_diff($b, $a); //  веведу все, которые есть в $b , но отсутствуют в  $a
var_dump($d);   //    6 / 7 
echo '<br>';
$e = array_merge($c, $d);   // слияние двух массивов
var_dump($e);   //  вывод результата
echo '<hr>';


//                       Задачи

// Дана строка '1234567890'. Найдите сумму цифр из этой строки не используя цикл.

// $Numb = (int)'1234567890';  // преобразую в  число
// var_dump( $Numb); 
$str = '1234567890';
$strTrue = str_split($str); // делаю из строки массив
echo '<br>';

 echo array_sum($strTrue); // складываю элементы массива



 // Создайте массив ['a'=>1, 'b'=2... 'z'=>26] не используя цикл

 $el = range(1, 26); 
 $key = range('a', 'z');

 $result = array_combine($key, $el); // объединяю два массива в один ассоциативный
 var_dump($result);
 echo '<hr>';

 // Создайте массив вида [[1, 2, 3], [4, 5, 6], [7, 8, 9]] не используя цикл

$arr = range(1, 9);

 array_chunk($arr, 3);//  [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
 echo '<hr>';

 //  Дан массив с элементами 1, 2, 4, 5, 5. Найдите второй по величине элемент. В нашем случае это будет 4.

 $arr = [1, 5, 4, 5, 5];

 sort($arr); // сортерую по возрастанию элементов
 var_dump($arr); // проверка
 echo '<br>';

echo $arr[1]; // вывожу второй элемент
echo '<hr style = "margin-bottom: 70px;">';

//                                      9.  Практика на комбинации функций




echo '<h2 style = "text-align: center;">Практика на комбинации функций</h2>';

// 1  Дан массив с числами. Найдите среднее арифметическое его элементов 
//(сумма элементов делить на количество) не используя цикл.

$arr = [2, 3, 2, 4, 3];

$sum = array_sum($arr); // сумма элементов массива
$count = count($arr); // число элементов в массиве
$result = $sum / $count; // Среднее ариф.
echo $result;

echo '<hr>';

// 2 Найдите сумму чисел от 1 до 100 не используя цикл.

$numbers = range(1, 100);
$result = array_sum($numbers);
echo $result;
// или      echo array_sum(range(1, 100));

echo '<hr>';





 // 3  Выведите столбец чисел от 1 до 100 не используя цикл.

 $arr = range(1, 11);
 echo implode('<br>', $arr);

 echo '<hr>';

 // 4 Заполните массив 10-ю иксами не используя цикл. 

 $arr = array_fill(0, 10, 'x');
 var_dump($arr);
 echo '<hr>';

 //  5 Заполните массив 10-ю случайными числами от 1 до 10 так, чтобы они не повторялись. Цикл использовать нельзя.

// $arr = array_fill(0, 10, range(1, 10)); 
// var_dump($arr); // shuffle

 $arr =  range(1, 10); // создаю
 shuffle($arr); // перемешиваю

 var_dump($arr);  // вывод
 echo '<hr>';

 // 6 Найдите факториал заданного числа не используя цикл.
 // Факториал - это произведение чисел от 1 до заданного числа включительно.

 $arr = array_product( range(1, 3)); // 1 * 1 * 2 * 3 = 6.
 echo $arr;
 echo '<hr>';

 // Дано число. Найдите сумму цифр этого числа не используя цикл.

 $num = 324;

echo array_sum(( str_split($num, 1))); // разбиваю на массив по 1 элементу и нахожу + вывожу сумму его чисел. 
echo '<hr>';



//   Дана строка. Сделайте заглавным последний символ этой строки не используя цикл.

$str = 'DanaStroka';

$str = 'abcde';
$str = strrev($str); // делаем    edcba
$str = ucfirst($str); // делаем последнюю буквы большой 
 $str = strrev($str);  // разворачиваем строку  в исходное положение, но заглавная теперь оказывается в конце
echo $str;

echo '<hr>';


// Дан массив с числами. Получите из него массив с квадратными корнями этих чисел не используя цикл.   array_map и sqrt.


$arr = [34, 124, 200, 347];

var_dump(array_map('sqrt', $arr));

echo '<hr>';


//  Заполните массив числами от 1 до 26 так, чтобы ключами этих чисел были буквы
// английского алфавита: ['a'=>1, 'b'=>2...]. Сделайте это не используя цикл.

$key = range('a', 'z');
$el = range(1, 26);

$result = array_combine($key, $el);
var_dump($result);
echo '<hr>';


// Дана строка с числами '1234567890'. Найдите сумму пар чисел:
// 12+34+56+78+90. Решите задачу, не используя цикл


$str = '1234567890';
$arr = str_split($str, 2);
echo array_sum($arr);

echo '<hr>';


//                    10 / Работа с формами




?>

<form action="" method="GET">
	<input type="text" name="city">
	<input type="submit">
</form>

<?php
	//Если форма была отправлена и город не пустой:
	if (!empty($_REQUEST['city'])) {
		$city = $_REQUEST['city'];
		echo 'Ваш город: '.$city;
	}

	echo '<hr>';


	//   Запрет ввода тегов

	// Решим предыдущую задачу так, чтобы пользователь не мог вводить
	// теги и сломать нам сайт. Для этого при записи содержимого поля в
	// переменную $city обработаем его (содержимое, то есть $_REQUEST['city'])
	// функцией strip_tags, которая удалит теги (можно вместо нее обработать функцией htmlspecialchars):

	?>

<form action="" method="GET">
	<input type="text" name="city">
	<input type="submit">
</form>

<?php
	
	if (isset($_REQUEST['city'])) {
		$city = strip_tags($_REQUEST['city']);
		echo 'Ваш город: '.$city;
	}
	echo '<hr>';

	// Скрываем форму после отправки
 // Давайте сделаем так, чтобы форма после отправки скрывалась:

		//Если город пустой - покажем форму
		if (isset($_REQUEST['city'])) {
			?>
					<form action="" method="GET">
						<input type="text" name="name">
						<input type="submit">
					</form>
			<?php
				}
			?>
			
			<?php
				//Если форма была отправлена и город не пустой:
				if (isset($_REQUEST['city'])) {
					$city = strip_tags($_REQUEST['age']);
					echo 'Ваш город: '.$age;
				}


				// Задачи для решения 

				// 1 Спросите у пользователя имя, возраст, а также попросите его ввести 
				//сообщение (его сделайте в textarea). Выведите эти данные на экран в формате,
				// приведенном под данной задачей. Позаботьтесь о том, чтобы пользователь не мог
				// вводить теги (просто удаляйте их) и таким образом сломать сайт.

				// Привет, Дмитрий, 25 лет.
                // Твое сообщение: ...
				echo '<hr style= "margin-top: 40px">';

				?>				
	<form action="" method="GET">
	<input type="text" name="name" placeholder="Имя">
	<input type="text" name="age" placeholder="Сколько вам лет?"> <br>
	<textarea style= "margin-top: 10px" name="message" placeholder="Напишите что-нибудь"></textarea> <br>
	<input type="submit">
</form>

<?php
	
	if ( isset($_REQUEST['name']) AND isset($_REQUEST['age']) ) {
		$name = strip_tags($_REQUEST['name']);
		$age = strip_tags($_REQUEST['age']);
		$message = strip_tags($_REQUEST['message']);
		echo 'Привет, '.$name.' '.$age.' лет.'.'<br>'.'Твоё сообщение: '.$message;  // вывожу введённые данные
	}	
	echo '<hr>';
	
	//  2  Спросите возраст пользователя. Если форма была отправлена и введен возраст,
	// то выведите его на экран, а форму уберите. Если же форма не была отправлена 
	//(это будет при первом заходе на страницу) - просто покажите ее.

	if (isset($_REQUEST['age'])) {
		?>
				<form action="" method="GET">
					<input type="text" name="age">
					<input type="submit">
				</form>
		<?php
			}
		?>
		
		<?php
			//Если форма была отправлена и город не пустой:
			if (isset($_REQUEST['age'])) {
				$age = strip_tags($_REQUEST['age']);
				echo 'Поздравляю, вам удалось дожить до '.$age.' лет.';
			}
	
			echo '<hr>';




			//////////////  Решил сделать случайный генератор имён (На UP work было такое задание)
 
			$names = array("Neo", "Morpheus", "Trinity", "Cypher", "Tank");
			$rand_keys = array_rand($names);
			echo $names[$rand_keys];

			
			echo '<hr>';
		///////////////////////////		


		//  3  Спросите у пользователя логин и пароль (в браузере должен быть звездочками). 
		//Сравните их с логином $login и паролем $pass, хранящихся в файле.
		// Если все верно - выведите 'Доступ разрешен!', в противном случае - 'Доступ запрещен!'.
		// Сделайте так, чтобы скрипт обрезал концевые пробелы в строках, которые ввел пользователь


		
			?>


			<h2>Введите логин и пароль</h2>
					<form action="" method="GET">
						<input type="text" name="login">
						<input type="password" name="pass">
						<input type="submit">
					</form>
			<?php
				
			?>
			
			<?php

				

				$pass = 123456789;
				$login = 'nagibator3000';
				if ( trim($_REQUEST['pass']) == $pass AND trim($_REQUEST['login']) == $login ) {  // trim удаляет пробелы в начале и конце строки у полученного значения

					$pass = strip_tags($_REQUEST['pass']);
					$login = strip_tags($_REQUEST['login']);
					echo 'Доступ разрешён';
				} else {
					echo 'Доступ запрещён';
				}
		
				echo '<hr>';


				//  4  Спросите имя пользователя с помощью формы. Результат запишите в переменную $name.
				// Сделайте так, чтобы после отправки формы значения ее полей не пропадали.




				?>

				<form action="" method="GET">
	<input name="name" value="<?php if (isset($_GET['name'])) echo $_GET['name']; ?>">
	<input type="submit">
</form>
<?php
	if (isset($_REQUEST['submit'])) {
		$name = $_REQUEST['name'];
		echo $name;
	}
	echo '<hr>';

	// 5  Спросите у пользователя имя, а также попросите его ввести сообщение (textarea). 
	// Сделайте так, чтобы после отправки формы значения его полей не пропадали.

	?>

<form action="" method="GET">
	<input type="text" name="login" value="<?php if (isset($_GET['login'])) echo $_GET['login']; ?>">	

	<textarea name="message">
	 <?php if (isset($_GET['message'])) echo $_GET['message']; ?> 
	 </textarea>

	<input type="submit">
</form>

<?php
	echo '<hr>';

//                                 11.  Работа с датами в PHP


// date
/*
Команды (заглавные буквы отличаются от обычных, обратите внимание!):

U – количество секунд, прошедших с 1 января 1970 года (то есть timestamp).
z – номер дня от начала года.
Y – год, 4 цифры.
y - год, две цифры.
m – номер месяца (с нулем спереди).
n – номер месяца без нуля впереди.
d – номер дня в месяце, всегда две цифры (то есть первая может быть нулем).
j – номер дня в месяце без предваряющего нуля.
w – день недели (0 - воскресенье, 1 - понедельник и т.д.).
h – часы в 12-часовом формате.
H – часы в 24-часовом формате.
i – минуты.
s – секунды.
L – 1, если високосный год, 0, если не високосный.
W – порядковый номер недели года.
t – количество дней в указанном месяце.
*/

// mktime()

//Функция mktime переводит заданную дату в формат timestamp.
// Формат timestamp - это количество секунд, прошедшее с 1-го января
// 1970 года по заданный момент времени.

// mktime(часы, минуты, секунды, месяц, день, год);


// Давайте получим разницу в секундах между 1970 годом и 31.12.2025, 12:59:59:
echo mktime(12, 59, 59, 31, 12, 2025); // 1815386399

echo date('t').'<br>';
echo date('d.m.Y').'<br>';
echo date('H:i:s d.m.Y'); // часы минуты секунды.  день месяц год

echo '<hr>';
//                 Задачи

// 1  Выведите текущее время в формате timestamp.

echo time();
echo '<hr>';

// 2.  Выведите 1 марта 2025 года в формате timestamp.

echo mktime(12, 59, 59, 1, 3, 2025);
echo '<hr>';


// 3.  Выведите 31 декабря текущего года в формате timestamp. 
//Скрипт должен работать независимо от года, в котором он запущен.

$year = date('Y');
echo mktime(12, 59, 59, 31, 12, $year);
echo '<hr>';

// 4. Найдите количество секунд, прошедших с 13:12:59 15-го марта
// 2000 года до настоящего момента времени.

time() - mktime(13, 12, 59, 15, 3, 2000); // текущее число секунд минус заданная дата
echo '<hr>';


// 5 Найдите количество целых часов, прошедших с 7:23:48 текущего 
// дня до настоящего момента времени.


 echo time() - mktime(7, 23, 48, 5, 4, 2021);  // непонятно
 echo '<hr>';


 // 6. Выведите на экран текущий год, месяц, день, час, минуту, секунду.

 echo date( 'Y.m.d H:i:s');
 echo '<hr>';


 // 8.  С помощью функций mktime и date выведите 
 // 12 февраля 2025 года в формате '12.02.2025'.


 // date(формат, [момент времени в формате timestamp]);
 echo date( 'd.m.Y',  mktime(0, 0, 0, 12, 2, 2025)); 
 echo '<hr>';


 // 9.  Создайте массив дней недели $week. Выведите на экран название
 // текущего дня недели с помощью массива $week и функции date.
 // Узнайте какой день недели был 06.06.2006, в ваш день рождения.

 echo date('w'); // выведет число текущего дня недели вс - 0   пн -1 и тд
 echo '<hr>';


 $week = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];


 $day = date('w');
 echo $week[$day]; // текущий день пн
 echo '<hr>';

 $day = date('w', mktime(0, 0, 0, 6, 6, 2006)); // если вторым параметром добавать дату в секундах, то  date вернет нам число, соответствующее дню недели за заданную дату (0 - воскресенье, 1 - понедельник и так далее)
 echo $week[$day]; // какой день недели был 06.06.2006
 echo '<hr>';

 $day = date('w', mktime(0, 0, 0, 1, 29, 1993)); 
 echo $week[$day]; // день недели когда я родился  пятница
 echo '<hr>';

 // 10 Создайте массив месяцев $month. Выведите на экран название
 // текущего месяца с помощью массива $month и функции date.

 $month = [ 'Нулевой месяц', 'Январь' , 'Февраль' , 'Март' , 'Апрель' ,
  'Май' , 'Июнь' , 'Июль' , 'Август' , 'Сентябрь' ,
   'Октябрь' , 'Ноябрь', 'Декабрь'];

   $nowMonth = date('n'); // n – номер месяца без нуля впереди.
   echo  $month[$nowMonth];
   echo '<hr>';

   // 11  Найдите количество дней в текущем месяце. 
   //Скрипт должен работать независимо от месяца, в котором он запущен.

echo date('t');  // t - показывает колличество дней в текущем месяце



  //  12  Сделайте поле ввода, в которое пользователь вводит год 
  // (4 цифры), а скрипт определяет високосный ли год.


  // L – 1, если високосный год, 0, если не високосный. 
  echo '<hr>';
  echo date('L');
  ?>
<h2>Введите год, и узнаете високосный ли он</h2>
<form action="" method="GET">
	<input type="text" name="visocos">	


	 <?php if (isset($_GET['visocos'])) {
				if (date(   'L', mktime(0, 0, 0, 1, 29, $_GET['visocos'])   ) == 1) {  //  аааа работает . я програмист  !!!!!!   подставил получение данных из формы в  год 
					echo 'Високосный';
				} elseif (date(   'L', mktime(0, 0, 0, 1, 29, $_GET['visocos'])   ) == 0) {
					echo 'Не високосный';
				} else {
					echo 'Не верный формат';
				}
	 } ?> 
	
	<input type="submit">
</form>

<?php
	echo '<hr>';



	// 14 Сделайте форму, которая спрашивает дату в формате '31.12.2025'. 
	// С помощью функций mktime и explode переведите эту дату в формат timestamp.
	// Узнайте день недели (словом) за введенную дату.

	?>


	<h2>Введите дату в формате 31-12-2025 и узнаете день недели</h2>
<form action="" method="GET">
	<input type="text" name="data">

	<?php if (isset($_GET['data'])) {
		$data = $_GET['data'];
		$arr = explode('-', $data );   // разделяем по указанному в input значению: 31-12-2025   получим ['31', '12', '2025']
	//	var_dump($arr);
	//	echo mktime(0, 0, 0, $arr[1], $arr[0], $arr[2]);

		// узнаю день недели

		$week = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];

		$day = date('w',  mktime(0, 0, 0, $arr[1], $arr[0], $arr[2])); 
		echo $week[$day]; // день недели, введённый пользователем

	}
?>

	<input type="submit">
</form>

<?php
	echo '<hr>';
// 15 Сделайте форму, которая спрашивает две даты в формате '2025-12-31'.
// Первую дату запишите в переменную $date1, а вторую в $date2. 
// Сравните, какая из введенных дат больше. Выведите ее на экран.

?>


<h2>Две формы. Введите дату в формате 2025-12-31, и получите большую из них</h2>
<form action="" method="GET">
	<input type="text" name="date1">
	<input type="text" name="date2">
	<input type="submit">
</form>

<?php if (isset($_GET['date1']) AND  isset($_GET['date2'])) {
		$date1 = $_GET['date1'];
		$date2 = $_GET['date2'];

		$arr1 = explode('-', $date1 );  // создаю первый массив
		$arr2 = explode('-', $date2 );  // создаю второй массив

		mktime(0, 0, 0, $arr1[1], $arr1[0], $arr1[2]);  // перевожу в секнды первую дату
		mktime(0, 0, 0, $arr2[1], $arr2[0], $arr2[2]); // перевожу в секнды вторую дату


		if ($date1 > $date2) {
			echo $date1;
		} elseif ($date1 < $date2) {
			echo $date2;
		} else {
			echo 'Неверный формат';
		}
}
echo '<hr>';

// 16 Дана дата в формате '2025-12-31'. С помощью функции strtotime
// и функции date преобразуйте ее в формат '31-12-2025'.


$data = strtotime('2025-12-31'); // преобразую дату в секунды с 1970 года.

echo date('d.m.Y', $data);  // задаю формат даты. 

echo '<hr>';

// 17 Сделайте форму, которая спрашивает дату-время в формате '2025-12-31T12:13:59'.
// С помощью функции strtotime и функции date преобразуйте ее в формат '12:13:59 31.12.2025'.



?>


<h2>Напишите дату и время в формате 2025-12-31T12:13:59</h2>
<form action="" method="GET">
	<input type="text" name="timeDate">
	<input type="submit">
</form>

<?php if ((isset($_GET['timeDate']))) {
	
	$timeDate =	( explode('T', $_GET['timeDate']) ); // преобразовал получаемую из инпута строку в  Array ( [0] => 2025-12-31 [1] => 12:13:59 )
	
	$data = strtotime($timeDate[0]); // преобразую дату в секунды
	$trueDate = date('d.m.Y', $data); // Задаю формат даты

	// соединяю время с датой и вывожу

	echo $timeDate[1].' '.$trueDate; 

}
echo '<hr>';

// 18  В переменной $date лежит дата в формате '2025-12-31'. Прибавьте к этой дате 2 дня, 
// 1 месяц и 3 дня, 1 год. Отнимите от этой даты 3 дня.

// Для решения задач данного блока вам понадобятся следующие функции: date_create, date_modify, date_format.


			// Пример :
/*
$date = date_create('2025-12-31');
	
date_modify($date, '1 day');
echo date_format($date, 'd.m.Y');
*/

//  Прибавьте к этой дате 2 дня
$date = date_create('2025-12-31'); // что-бы модифицировать дату, сначало нужно сделать её объектом

 date_modify($date, '2 days');
 // date_modify($date, '3 days 1 month');
 //  date_modify($date, '3 days 1 year');
 // date_modify($date, '-3 days');
 // date_modify($date, '-2 hours');


echo date_format($date, 'd.m.Y');  // вывести можно только через date_format

echo '<hr>';

// 19.  Узнайте сколько дней осталось до Нового Года. Скрипт должен работать в любом году.



 $year = date('Y'); // показываем текущий год  2021
 $sec =   mktime(11, 11, 11, 12, 31, $year) - time(); // переводим время следующего нового года в секунды и отнимаем текущее время.

 $sec; // получил разницу между моментом и новым годом в секундах
 $result = round($sec / 60 / 60 / 24);  // получаю минуты, часы, дни. Обрезаю числа после запятой.

 echo 'До нового года осталось '. $result. ' дней';

 echo '<hr>';

 // 20.  Сделайте форму с одним полем ввода, в которое пользователь вводит год.
 // Найдите все пятницы 13-е в этом году. Результат выведите в виде массива дат.
 ///////////////////// не решено 
 ?>

 <h2>Введите год и узнаете сколько в нём пятниц 13</h2>
 <form action="" method="GET">
	 <input type="text" name="year13">
	 <input type="submit">
 </form>
 
 <?php if ((isset($_GET['year13']))) {
	 $year = $_GET['year13'];
	 $month = 1;
	 $day = 13;
	
	 $sum = '';
	 if ( date('d',  mktime(0, 0, 0, $month, $day, $year)) == 13) {
		for ($month; $month <= 12; $month++) {
			
				
			} // номер дня в месяце 
			echo date('w', mktime(0, 0, 0, $month, $day, $year)).'<br>';
	 }
	// if ( 'w' == 5;);

 }

// d – номер дня в месяце, всегда две цифры (то есть первая может быть нулем).
/////////////////// не решено 
echo '<hr>';


// 21  Узнайте какой день недели был 100 дней назад.

$dateToday = date_create(date('d.m.Y')); // превращаю сегодняшнюю дату в объект


date_modify($dateToday, '-100 days'); // отнимаю 100 дней

$week = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];

$weekNumber = date_format($dateToday, 'w');  // вывожу дату

echo $week[$weekNumber]; // ср
echo '<hr>';




//                          Основы работы с пользовательскими функциями


// 1.  Сделайте функцию, которая возвращает квадрат числа. Число передается параметром.

function func($num) {
	return $num*$num; 
}

 echo func(5);
 echo '<hr>';

 //  Сделайте функцию, которая возвращает сумму двух чисел. Числа передаются параметрами функции.

function func_2($num1, $num2) {
	return $num1 + $num2;
}

echo func_2(23, 32);
echo '<hr>';

//  Сделайте функцию, которая отнимает от первого числа второе и делит на третье.

function func_3($num1, $num2, $num3) {
	return  ($num1 - $num2) / $num3;
}

 echo func_3(10, 4, 2); // 3
 echo '<hr>';



// Сделайте функцию, которая принимает параметром число от 1 до 7, а возвращает день недели на русском языке.


 function func_4($rand) {
//	$rand = rand(1, 7);
	$week = [ 1 => 'пн', 2 => 'вт', 3 => 'ср', 4 => 'чт', 5 => 'пт', 6 => 'сб', 7 => 'вс' ];
	return $week[$rand];

 }

 echo func_4(3); // выведет случайный день недели. Можно использовать своё число, если закоментировать rand.
 
 echo '<hr>';

 //             Приемы работы с флагами на PHP


 $arr = ['a', 'b', 'c', 'd', 'с'];
 $flag = false; //считаем, что элемента 'c' нету в массиве
 
 foreach ($arr as $elem) {
	 if ($elem == 'c') {
		 $flag = true; //элемент есть - переопределим переменную $flag
		 break;
	 }
 }
 
 //тут переменная $flag равна или true, или false


 // Теперь после цикла мы можем сделать иф, который посмотрит на
 // переменную $flag и выведет на экран 'есть' или 'нет':

 if ($flag === true) {
	echo 'Есть';
} else {
	echo 'Нет';
}
echo '<hr>';

// пример с функцией

function hasElem($arr) 
{
	foreach ($arr as $elem) {
		if ($elem == 'c') {
			return true;
		}
	}

	return false; //элемент 'c' не найден
}
$arr = ['a', 'b', 'c', 'd', 'с'];
echo hasElem($arr);
echo '<hr>';
// Таким образом и работают флаги. Запомните этот прием - он обязательно встретится вам в дальнейшем, причем неоднократно.

 // Еще раз как это работает: если в массиве найдется элемент со значением 'c' - мы 
 // выйдем из функции с помощью return. Но если в массиве не найдется элемент 'c' - выхода
 // из функции не произойдет и выполнение дойдет до команды return false. И получится,
 // что функция вернет false в знак того, что элемент 'c' не найден в массиве.


 //            Задачи
 
// 1 Дан массив с числами. Проверьте, что в этом массиве есть число 5. Если есть - выведите 'да', а если нет - выведите 'нет'.

$arr = [4, 2, 23, 45, 3, 5, 6];

function hasNum($arr) {
foreach($arr as $elem) {
	if ($elem == 5) {
		return 'да';
	}
 }
 return 'нет';
}

echo hasNum($arr);
echo '<hr>';


//  Дано число, например 31. Проверьте, что это число не делится ни на одно 
//другое число кроме себя самого и единицы. То есть в нашем случае нужно проверить, 
//что число 31 не делится на все числа от 2 до 30. Если число не делится - 
// выведите 'нет', а если делится - выведите 'да'.

function numSelf($num) {
	for ($i = 2; $i < $num; $i++) {
		if ($num % $i == 0) {
			return 'Да';
		} 
	}
	return 'Нет';
}

echo numSelf(31);
echo '<hr>';

// 3. Дан массив с числами. Проверьте, есть ли в нем два одинаковых числа подряд.
//  Если есть - выведите 'да', а если нет - выведите 'нет'.





 
$arr = [4,12,73,8,1,1,36,7,6,22,22,3];

for ($i = 0; $i < count($arr); $i++) {
    if ($i && $arr[$i] == $arr[($i-1)]) {  
        echo 'есть идущие подряд: '.$arr[$i].' - '.$arr[$i].'<br>';
    }
}






//                    Урок 14.   Приемы работы с логическими значениями

// Суть приемов: различные логические операции типа >, <, ==, ===, !=
// могут использоваться не только в ифах, но и сами по себе. Пример:

$a = 4;
$b = 3;

$c = $a > $b; //в переменную $c запишется true

// Можно также делать комбинации с логическим И && и ИЛИ ||:

$a = 3;
$b = 4;

$c = $a < 10 && $b < 10;

// Логические операции без ифов

// Пусть у нас есть функция с ифом. Вот она:

function funcia($a, $b) 
{
	if ($a > $b) {
		return true;
	} else {
		return false;
	}
}


// Вооружившись знаниями из начала урока, ее можно переписать гораздо проще:

function funcia_1($a, $b) 
{
	return $a > $b;  // если a < b   то функция не вернётся
}

echo funcia_1(21, 20); 

echo '<hr>';
//                    Задачи


 // 1. Сделайте функцию, которая параметрами принимает 2 числа. Если эти числа равны 
 // - пусть функция вернет true, а если не равны - false.

 function fun($a, $b) {
	 
	 
		 return $a == $b ;
		 
	 }
 echo fun(23, 23);
 echo '<hr>';

 // 2 Сделайте функцию, которая параметрами принимает 2 числа.
 // Если их сумма больше 10 - пусть функция вернет true, а если нет - false.


 function fun_1($a, $b) {
	 $c = $a + $b;
	return $c > 10;
	
}
echo fun_1(24, 23);  // функция не вернётся
echo '<hr>';

//  Сделайте функцию, которая параметром принимает число и проверяет - отрицательное оно или нет.
// Если отрицательное - пусть функция вернет true, а если нет - false.

function fun_2($a) {
	 
	 
	return $a >= 0;
	
}
echo fun_2(23).'ТРУЕ';
echo '<hr>';


//               урок 15      Приемы работы с циклами на PHP.

// 1.  С помощью цикла for сформируйте строку '123456789' и запишите ее в переменную $str
$str = '';
for ($i = 1; $i <= 9; $i++) {
	$str .= $i;
}

echo $str;
echo '<hr>';

// 2. 

$str = '';
for ($i = 9; $i >= 1; $i--) {
	$str .= $i.'-';

}

echo trim($str, '-'); // Вывел с идалённым пробелом в конце строки
echo '<hr>';

// 4. Нарисуйте пирамиду, как показано на рисунке, только у вашей пирамиды должно быть 20 рядов, а не 5:

// x
// xx
// xxx
// xxxx
// xxxxx

$str = '';
for ($i = 0; $i <= 20; $i++) {
	$str .= 'x';
	echo $str.'<br>';
}

echo '<hr>';

// 5. С помощью двух вложенных циклов нарисуйте следующую пирамидку:

/*
1
22
333
4444
55555
666666
7777777
88888888
999999999
*/

for($i = 1; $i <= 9; $i++) {
	for($j = 1; $j <= $i; $j++) {
		echo $i;
	}
	echo '<br>';
}
echo '<hr>';

// 6. Нарисуйте пирамиду, как показано на рисунке, воспользовавшись циклом for:

	/*
xx
xxxx
xxxxxx
xxxxxxxx
xxxxxxxxxx
	*/

	$str = '';
	for ($i = 1; $i <= 5; $i++) {
		$str .= 'xx';
		echo $str.'<br>';
	}
	
	echo '<hr>';


	//          Урок  16        Приёмы работы с массивами 




	// переворот ассоциативного массива


	$arr = ['a'=>1, 'b'=>2, 'c'=>3, 'd'=>4, 'e'=>5];
	$result = [];
	
	foreach ($arr as $key=>$elem) {
		$result[$elem] = $key;
	}
	
	var_dump($result); //выведет [1=>'a', 2=>'b', 3=>'c', 4=>'d', 5=>'e']

	echo '<hr>';


//	Подсчет количества элементов в массиве

$arr = ['a', 'b', 'c', 'a', 'a', 'b'];
$count = ['a'=>0, 'b'=>0, 'c'=>0];

foreach ($arr as $elem) {
	$count[$elem]++;
}

var_dump($count); //выведет ['a'=>3, 'b'=>2, 'c'=>1]

echo '<hr>';



//  Перебор многомерных массивов

$arr = [[1, 2, 3, 4, 5], [6, 7, 8], [9, 10]];
	
foreach ($arr as $elem) {
	foreach ($elem as $subElem) {
		echo $subElem; // 12345678910
	}
}
echo '<hr>';

//                Задачи 

// 1.  Заполните массив следующим образом: в первый элемент запишите 'x', во второй 'xx', в третий 'xxx' и так далее.

$arr = [];
$str = '';

for ($i = 0; $i < 10; $i++) {
	$str .= 'x';
	$arr[] = $str;
	
}

var_dump($arr);
echo '<hr>';


// 2. С помощью двух вложенных циклов заполните массив следующим образом:
// в первый элемент запишите '1', во второй '22', в третий '333' и так далее.
$str = '';
$arr = [];

for($i = 1; $i <= 9; $i++) {
	for($j = 1; $j <= $i; $j++) {

		$str .= $i;
		
	}
	$arr[] = $str;
	$str = '';	
}
var_dump($arr);
echo '<hr>';


// 3. Сделайте функцию arrayFill, которая будет заполнять массив заданными значениями.
// Первым параметром функция принимает значение, которым заполнять массив,
// а вторым - сколько элементов должно быть в массиве.
//  Пример: arrayFill('x', 5) сделает массив ['x', 'x', 'x', 'x', 'x'].

function arrayFill($elem, $times) {
	$arr = [];
	for ($i = 0; $i < $times; $i++) {
		$arr[] = $elem;
	}
	return $arr;
}



var_dump(arrayFill('z', 5)); // заполнить массив пятью 'z'

echo '<hr>';

// 4.  Дан массив с числами. Узнайте сколько элементов с начала массива надо сложить,
// чтобы в сумме получилось больше 10-ти. Считайте, что в массиве есть нужное количество элементов.

$arr = [5, 3, 1, 3, 1, 1, 1, 5, 3];
$sum = 0;

for ($i = 0; $i <= count($arr); $i++) {
	$sum = $sum + $arr[$i];
	if ( $sum > 10 ){ // проверяем
		break;  // прерываем цикл
	}
	
}
echo $i + 1; // вывожу нумераци и добавляю 1, так как отсчёт начинается с нуля 
echo '<hr>';

// 5 Дан двухмерный массив с числами, например [[1, 2, 3], [4, 5], [6]].
// Найдите сумму элементов этого массива. Массив, конечно же, может быть произвольным.

$arr = [[1, 2, 3], [4, 5], [6]];
$sum = 0;

foreach ($arr as $elem) { // можно перебирать без $i++   !!!!
	foreach ($elem as $subElem) {
		$sum = $sum + $subElem; //
	}
}

echo $sum;  // 21
echo '<hr>';


// 6 Дан трехмерный массив с числами, например [[[1, 2], [3, 4]], [[5, 6], [7, 8]]].
// Найдите сумму элементов этого массива. Массив, конечно же, может быть произвольным.

$arr = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];
$sum = 0;

foreach ($arr as $elem) { // можно перебирать без $i++   !!!!
	foreach ($elem as $subElem) {
		foreach ($subElem as $dublSub) {
		$sum = $sum + $dublSub; 
		}
	}
}

echo $sum;  // 36
echo '<hr>';

// 7. С помощью двух циклов создайте массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]].


 $arr = array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)); // решение но не с помощью циклов

 echo '<pre>';
 var_dump($arr);
 echo '</pre>';

 echo '<hr>';

 // Урок  17.   Правильное использование пользовательских функций


 /*
Задача. Дан массив с числами. Создайте из него новый массив,
 где останутся лежать только положительные числа. Создайте для 
 этого вспомогательную функцию isPositive, которая параметром будет 
 принимать число и возвращать true, если число положительное, и false - если отрицательное.
 */

$arr = [1, 2, 3, -1, -2, -3];
	
function isPositive($num) 
{
	if ($num >= 0) {
		return true;
	} else {
		return false;
	}
}

$newArr = [];
foreach ($arr as $elem) {
	if (isPositive($elem)) {
		$newArr[] = $elem;
	}
}

var_dump($newArr);
echo '<hr>';

// Задачи для решения


// 1  Сделайте функцию isNumberInRange, которая параметром принимает число и проверяет,
//  что оно больше нуля и меньше 10. Если это так - пусть функция возвращает true, если не так - false.


function isNumberInRange($num) {
	if ($num > 0 AND $num < 10) {
		return true;
	} else {
		return false;
	}
}

echo isNumberInRange(3); // выведет 1


// 2. Дан массив с числами. Запишите в новый массив только те числа, которые больше нуля и меньше 10-ти. 
// Для этого используйте вспомогательную функцию isNumberInRange из предыдущей задачи.

$arr = [1, -4, 3, -4, 5, -5, 14, 345];
$arrPositive = [];

foreach ($arr as $elem) {
	if (isNumberInRange($elem)) {
		$arrPositive[] = $elem;
	}
}

echo '<pre>';
var_dump($arrPositive); //  1  3  5
echo '</pre>';


// 3.  Сделайте функцию getDigitsSum (digit - это цифра),
// которая параметром принимает целое число и возвращает сумму его цифр.
$digit = 12314;
function getDigitsSum($digit) {
$result = 0;

	$mass =	str_split($digit, 1);
	foreach($mass as $elem) {
		$result += $elem;
	}
	echo $result; // после цикла вывожу сумму чисел
}

 echo getDigitsSum(12314); // 11

echo '<hr>';

// 4.  Найдите все года от 1 до 2021, сумма цифр которых равна 13. 
// Для этого используйте вспомогательную функцию getDigitsSum из предыдущей задачи.

// не смог решить !!!!!!

// 5.  Сделайте функцию isEven() (even - это четный), которая параметром
//  принимает целое число и проверяет: четное оно или нет. Если четное -
//  пусть функция возвращает true, если нечетное - false.

function isEven($num) {
if ($num % 2 == 0) {
	return true;
}  else {
	return false;
}  
}

echo isEven(4); // 1
echo '<hr>';

// 6.  Дан массив с целыми числами. Создайте из него новый массив,
//  где останутся лежать только четные из этих чисел.
//  Для этого используйте вспомогательную функцию isEven из предыдущей задачи.

$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 100];
$arrPositive = [];

foreach ($arr as $elem) {

	if (isEven($elem)) {  // если true 
		$arrPositive[] =  $elem;  // добавить $elem
	}
}

echo '<pre>';
var_dump($arrPositive);
echo '</pre>';


// 7. Сделайте функцию getDivisors, которая параметром принимает число и 
// возвращает массив его делителей (чисел, на которое делится данное число).

function getDivisors($num) {
	$arrDelitel = [];
	for ($i = 1; $i <= $num; $i++) {
		if ($num % $i == 0)
		$arrDelitel[] = $i;
	}
	return $arrDelitel; // возвращаем массив
}

 var_dump( getDivisors(15)); // 1 3 5 15
 echo '<hr>';
 

 //  Сделайте функцию getCommonDivisors, которая параметром принимает 2 числа,
 // а возвращает массив их общих делителей. Для этого используйте вспомогательную
 //  функцию getDivisors из предыдущей задачи.


 // использую array_intersect для поиска пересечения массивов

 function getCommonDivisors($num1, $num2) {
	$arr1 =	getDivisors($num1);
	$arr2 = getDivisors($num2);

	$result = array_intersect($arr1, $arr2);
	var_dump($result);
	
 }

getCommonDivisors(15, 30); // 1 / 3 / 5 / 15 
echo '<hr>';












////////////   Повторил     



























// Ещё задачи на работу с пользовательскими функциями PHP

// 2.  Сделайте функцию, которая возвращает множественное или единственное число существительного. 
// Пример: 1 яблоко, 2 (3, 4) яблока, 5 яблок. Функция первым параметром принимает число,
// а следующие 3 параметра — форма для единственного числа, для чисел два, три,
// четыре и для чисел, больших четырех, например, func(3, 'яблоко', 'яблока', 'яблок').

// $num % 10; -  дробный остаток от 10 позволяет узнать последн.. цифру в числе.

function yabloki($num, $ko, $ka, $k) {
	if ($num % 10 == 1 ) {
		echo $num.' '.$ko;
	} elseif ($num % 10 == 2 OR $num % 10 == 3 OR $num % 10 == 4) {
		echo $num.' '.$ka;
	} else {
		echo $num.' '.$k;
	}

}

yabloki(35, 'Яблоко', 'Яблока', 'Яблок');
echo '<hr>';

// 3. Найдите все счастливые билеты. Счастливый билет - это билет,
// в котором сумма первых трех цифр его номера равна сумме вторых трех цифр его номера.

$lucky = 212401;

$res = array_chunk(str_split($lucky, 1), 3); // разбиваю число по одному элементу и  создаю два массива в одном

$sum1 = 0;
foreach ($res[0] as $elem) {
	$sum1 = $sum1 + $elem; // первое число 
	}
	
	$sum2 = 0;
foreach ($res[1] as $elem) {
	$sum2 = $sum2 + $elem; // второе число 
	}

	if ($sum1 == $sum2) {
		echo "Cчастливый номер".' '.$lucky;
	} else {
		echo $sum1.' '.$sum2.' Имеют разную сумму. Не расстраивайтесь, повезёт в другой раз';  
	}
	echo '<hr>';

// Рекурсия. Рекурсия, это когда функция вызывает сама себя

// Если осталось, опять запускаем эту же функцию last, которая забирает последний элемент,
// проверяет осталось ли что в массиве и запускает саму себя при необходимости:

$arr = [1, 2, 3, 4, 5];

last($arr);

function last($arr)
{
	echo array_pop($arr).'<br>'; //выводим последний элемент массива

	if(!empty($arr)) {
		last($arr); //это рекурсия
	}
}
echo '<hr>';
// 19. Продвинутая работа с пользовательскими функциями в PHP


// 1 Сделайте функцию cut, которая первым параметром будет принимать строку,
// а вторым параметром - сколько первых символов оставить в этой строке.
// Второй параметр должен быть необязательным и по умолчанию принимать значение 10.

$str = 'Stroka_strokakvkhalvneavnafvadfva';
$ten;

function cut($str, $ten = 10) {
	echo substr($str, 0, $ten); // вывожу первые десять символов
}

cut('vaf252523525235252'); // первый параметр прировнится к $str.  Можно по желанию изменить $ten. Или ничего не указывать при вызове функции

echo '<hr>';

// 2.  Дан массив с числами. Выведите последовательно его элементы используя рекурсию и не используя цикл.

$arr = [1, 3, 5, 7, 9, 0];

recurse($arr); // вызываем

function recurse($arr)
{
	echo array_shift($arr).'<br>'; //выводим первый элемент массива

	if(!empty($arr)) { // если не пустой, запускаем функцию
		recurse($arr); //это рекурсия
	}
}
echo '<hr>';

//  Дано число. Сложите его цифры. Если сумма получилась более 9-ти, опять сложите его цифры.
// И так, пока сумма не станет однозначным числом (9 и менее). 


//  getDigitsSum();   -- ранее созданая функция. складывает цифры в числе



function recurse2($num) {
	echo getDigitsSum($num).'<br>'; // Складываем

	if(getDigitsSum($num) >= 10) { // если не пустой, запускаем функцию
		recurse2($num); //это рекурсия
	}
}


recurse2(254); // вызываем
echo '<hr><h2>Задачи на продвинутую работу с формами в PHP</h2> ';

// 20.  Задачи на продвинутую работу с формами в PHP

// 1.  Спросите у пользователя имя с помощью формы. Сделайте чекбокс: если он отмечен,
// то поприветствуйте пользователя, если не отмечен - попрощайтесь с пользователем.

?>

<form action="" method="GET">
	<h2>Введите имя и поставьге галочку</h2>
	<input type="text" name="name" value=""> 
	<input type="hidden" name="hello" value="0"> 
	<input type="checkbox" name="hello" value="1">
	<input type="submit">
</form>

<?php
	if (isset($_REQUEST['hello']) and $_REQUEST['hello'] == 0) {
		echo 'Чекбокс не отмечен, до свидания';
	}

	if (isset($_REQUEST['hello']) and $_REQUEST['hello'] == 1) {
		echo 'Привет '.$_REQUEST['name'];
	}
	

// 2	Спросите у пользователя, какие из языков он знает: html, css, php, javascript. 
//Выведите на экран те языки, которые знает пользователь
	?>

<form action="" method="GET">
<h2>Какими навыками вы владеете?</h2>
	<p>html<input type="checkbox" name="lang[]" value="html"></p>
	<p>css<input type="checkbox" name="lang[]" value="css"></p>
	<p>php<input type="checkbox" name="lang[]" value="php"></p>
	<p>javascript<input type="checkbox" name="lang[]" value="javascript"></p>
	<input type="submit">
</form>

<?php
	if(isset($_REQUEST['lang']))
	{
		echo 'Вы знаете: ' . implode(',', $_REQUEST['lang']);
	}

	//Работа с radio переключателями

	//  3   Спросите у пользователя знает ли он PHP с помощью двух radio-кнопок.
	// Выведите результат на экран. Сделайте так, чтобы по умолчанию один из вариантов был уже отмечен.
?>

<form action="" method="GET">
	<p>Вы знаете PHP?</p>
	<p>да<input type="radio" name="php" value="1" checked></p>
	<p>нет<input type="radio" name="php" value="0"></p>
	<input type="submit">
</form>

<?php
	if (isset($_REQUEST['php']) and $_REQUEST['php'] == 0) {
		echo 'Вы не знаете PHP';
	}

	if (isset($_REQUEST['php']) and $_REQUEST['php'] == 1) {
		echo 'Вы  знаете PHP!';
	}


	// 4. Спросите у пользователя его возраст с помощью нескольких radio-кнопок. 
	//Варианты ответа сделайте такими: менее 20 лет, 20-25, 26-30, более 30.

	?>

<form action="" method="GET">
	<p>Сколько вам лет?</p>
	<p>Менее 20<input type="radio" name="age" value="менее 20" checked></p>
	<p> 20-25<input type="radio" name="age" value="20-25"></p>
	<p> 26-30<input type="radio" name="age" value="26-30" ></p>
	<p> более 30<input type="radio" name="age" value="более 30"></p>
	
	<input type="submit">
</form>

<?php
	if (isset($_REQUEST['age'])) {
		echo 'Вам '. $_REQUEST['age'].' лет';
	}

  // Select и multi-select


	// 5. Спросите у пользователя его возраст с помощью select.
	// Варианты ответа сделайте такими: менее 20 лет, 20-25, 26-30, более 30.

	?>
<form action="" method="GET">
	<p>Сколько вам лет с тегом select?</p>
	<select name="age" id="">
			<option value = "20 лет">20 лет</option>
			<option value = "20-25">20-25</option>
			<option value = "26-30">26-30</option>
			<option value = "более 30">более 30</option>
	</select>
	<input type="submit">
</form>

<?php
	if (isset($_REQUEST['age'])) {
		echo 'Вам '. $_REQUEST['age'].' лет';
	}
	echo '<hr>';

	// 7. Сделайте функцию, которая создает обычный текстовый инпут.
	// Функция должна иметь следующие параметры: type, name, value.

	function input($type, $name, $value)
	{
		return '<input type="'.$type.'" name="'.$name.'" value="'.$value.'">';

		}
	
	echo input('text', 'input', '1');

	// 9.  Сделайте функцию, которая создает чекбокс. Если чекбокс не отмечен -
	// функция должна отправлять 0 (то есть нужно сделать hidden инпут), если отмечен - 1.


	function input2($name)
	{
		return '<input type="hidden" name="'.$name.'" value="0">
		<input type="checkbox" name="'.$name.'" value="1">';
	}
	echo input2('checkbox');


	// 10.  Напишите функцию, которая создает чекбокс и сохраняет его значение после отправки.

	function input3($name)
	{
		if(isset($_REQUEST[$name]) and $_REQUEST[$name] == 1) {
			$value = 'checked';
		} else {
			$value = '';
		}
		return '<input type="hidden" name="'.$name.'" value="0">
		<input type="checkbox" name="'.$name.'" value="1" '.$value.'>';
	}
	echo input3('checkbox');

	echo '<hr>';

	// Финишшшшшшшшшшшшшшшшшшшшш  ///////////////////////////////////////////
	// Финишшшшшшшшшшшшшшшшшшшшш  ///////////////////////////////////////////
	// Финишшшшшшшшшшшшшшшшшшшшш  ///////////////////////////////////////////
	// Финишшшшшшшшшшшшшшшшшшшшш  ///////////////////////////////////////////

	
echo '<h2>Повторение материала. Практика</h2>';

// ПОВТОРЕНИЕ - МАТЬ УЧЕНИЯ 


// Урок  21.  Задачи на отработку циклов и функций PHP



//  Дан многомерный массив (см. его под задачей). С помощью цикла выведите строки в формате 'имя-зарплата'.

// задача 1.   Дан многомерный массив (см. его под задачей). С помощью цикла выведите строки в формате 'имя-зарплата'.

$arr = [
	0=>['name'=>'Коля', 'salary'=>300],
	1=>['name'=>'Вася', 'salary'=>400],
	2=>['name'=>'Петя', 'salary'=>500],
];

$str = '';
foreach($arr as $i) {
	echo $i['name'].' - '.$i['salary'].'<br>';
	
}


// задача 2.  Заполните двумерный массив случайными числами от 1 до 10.
// В каждом подмассиве должно быть по 10 элементов. Должно быть 10 подмассивов.

$arr = [];

for($i = 1; $i <= 10; $i++) {
	for($j = 1; $j <=10; $j++) {
		$arr[$i][] = mt_rand(1, 10);
	} 
}

var_dump($arr);
echo '<hr>';

// задача 3.  С помощью только одного цикла нарисуйте следующую пирамидку:

$str = '';
for($i = 1; $i <= 9; $i++) {
$str = str_repeat($i, $i);
echo $str.'<br>';
}
echo '<hr>';

//  задача 3.   Нарисуйте пирамиду, как показано на рисунке, только у вашей пирамиды должно быть не 5 рядов,
// а произвольное количество, оно задается так: $str = 'xxxxxxxx'; - это первый ряд пирамиды.

// Подсказка: используйте цикл и функцию substr.

// substr(строка, откуда, [сколько]);
// iconv_strlen


$str = 'xxccccvvvvvvvbbbbbbbbbbbbnnnnnnnnnnnnnnnnnnnjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy';
$length = iconv_strlen($str);

for($i = $length; $i >= 1; $i--) {  // i = длинна строки 
echo	substr($str, 0, $i).'<br>';
}


// задача 4 Дан массив с произвольными числами. Сделайте так,
// чтобы элемент повторился в массиве количество раз, соответствующее его числу.
// Пример: [1, 3, 2, 4] превратится в [1, 3, 3, 3, 2, 2, 4, 4, 4,



$arr = [1, 2, 3, 4];
$newArr = [];
foreach ($arr as $elem) {
	for ($i = 1; $i <= $elem; $i++) {
		$newArr[] = $elem;
	}
}


echo '<pre>';
var_dump($newArr);
echo '</pre>';


// Задача 5.  Дана строка. Удалите из этой строки четные символы.


$str = 'abcdegvb';

$strArr = str_split($str); // превращаю строку в массив
$NewStr = '';  // накопление

for($i = 0; $i <= count(array_keys($strArr)); $i++) {
	if($i % 2 == 0) // если $i  не чётное. Так как а = 0; и =1. То есть отсчёт начинается с чётного числа 0. Меняю знак
	 $NewStr .=  $strArr[$i];  // накопить эту $i в строку
} 
echo $NewStr; // вывод 

//$stro = implode()


echo '<hr>';

$num = 11;  
$flag = false;
for ($i = 2; $i < $num; $i++) {
	if ($num % $i == 0) {
		$flag = true;
		break;
	}
}

if ($flag == true) {
	echo'Сложное число';  
} else {
	echo 'Простое число';  // 11 простое число
}

echo '<hr>';
//////////////////////////

/////////////////////////



////                                 Практика по напианию скриптов

// 3 задача

 // По заходу на страницу выведите текущую дату в формате '12 мая 2015 года, воскресенье'.

 $months = array( 1 => 'Января' , 'Февраля' , 'Марта' , 'Апреля' , 'Мая' , 'Июня' , 'Июля' , 'Августа' , 'Сентября' , 'Октября' , 'Ноября' , 'Декабря' );
 $week = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];

echo '<h2>Сегодня</h2>' ;

 $today = date('w');
$segodnya = $week[$today];  // сегодня 

$dateDay = date('m');  // получаю месяц по счёту от 1 до 12
$date2_0 = str_replace('0', '', $dateDay); // получаю день и удаляю нули
$dayToday = $months[$date2_0]; // получаю название месяца из массива


echo date( 'd '.$dayToday.' Y года, '.$segodnya).'<br>';  // готово!!!!!!!!!

 echo '<hr>';

 // Дан массив праздников. По заходу на страницу, если сегодня праздник, то поздравьте пользователя с этим праздником.

 $celebration = ["Новый год", "День всех трудящихся", "День анимешника"];

$day = date('d'); // сегодняшнее число (1 -31)
$date2_0; // число месяца от 1 до 12



if($day == 31 AND $date2_0 == 12) {
	echo $celebration[0]; // вывожу новый год
} // и тд все праздники из массива 


//              задание 10 (Хреново и неверно выводит результат. Но я старался и у меня частично получилось)

 // Дан текстареа и кнопка. В текстареа вводится текст. По нажатию на кнопку выведите количество слов в тексте,
 // количество символов в тексте, количество символов за вычетом пробелов.
 ?>
<form action="" method="">
<textarea name="zodiac" id="" cols="30" rows="10"> 
<?php if (isset($_GET['zodiac'])) echo $_GET['zodiac']; //Сохраняю текст поля после отправки       ?> 
</textarea>
<input type="submit">
</form>
<?php 

 if ((isset($_GET['zodiac']))) {
//	$text = $_GET['zodiac']; // получаю текст в переменную
 }



  $text; // полученый текст из textarea 

 
$noEmpty = str_replace(' ', '', $_GET['zodiac']); // удаляю пробелы
$bezProbelov = iconv_strlen(trim($noEmpty)); // Символов без пробелов.   (удаляю пробелы в начале и конце. и подсчитываю кол-во символов.)  
$withProbel = iconv_strlen($_GET['zodiac']); // число символов с пробелами

 $wordCount = count(preg_split('#[\s,]+#', $_GET['zodiac'])) - 2; // Выводит кол-во слов (нашёл костыльный скрипт для кириличного текста)

echo $withProbel.' символов с пробелами. '.$bezProbelov.' символов без пробелов. '.$wordCount.' Слов';

echo '<hr>';





///////////////////////
//////////////////



// Урок 23.  Работа с HTML из PHP




 // Дан массив ['name'=>'Иван', 'age'=>30]. Выведите с его помощью на экран фразу 'Привет, Иван! Тебе 30 лет.'.
 // Напишите два варианта решения - с одинарными кавычками и двойными.



$arr = ['name'=>'Иван', 'age'=>30];

// первый вариант
echo "Привет, {$arr['name']}! Тебе 30 лет.";// нужны именно двойные ковычки, а так-же поместить массив и ключ в курл брэйсис
echo '<hr>';
// второй
echo "Привет, $arr[name]! Тебе 30 лет."; // вариант без скобок и ковычек тоже работает
echo '<hr>';

//Дана переменная $href со значением 'index.html' и переменная
// $text со значением 'ссылка'. Выведите с их помощью на экран текст
// <a href="index.html">ссылка</a>.

echo "<a href=\"https://webgrows.ru\">ссылка</a>"; // в ссылках нужно отделять ковычки слешами


// Теги и циклы

// 1. Дан массив. Выведите каждый элемент этого массива в отдельном абзаце.

$arr = ['строка 1', 'строка 2', 'строка 3', 'строка 4', 'строка 5'];

foreach($arr as $elem) {
	echo "<p>$elem</p><br>";
}

// 2.  Дан массив. Выведите каждый элемент этого массива в отдельной li в теге ul.

echo "<ul>";
 
foreach($arr as $elem) {
	echo "<li>$elem</li>";
}

echo "</ul>";


// 3.  Дан массив:


	$arr = [
		['href'=>'1.html', 'text'=>'ссылка 1'],
		['href'=>'2.html', 'text'=>'ссылка 2'],
		['href'=>'3.html', 'text'=>'ссылка 3'],
	];


// С помощью цикла сформируйте с его помощью следующий HTML код:
/*
<a href="1.html">ссылка 1</a>
<a href="2.html">ссылка 2</a>
<a href="3.html">ссылка 3</a>
*/


foreach($arr as $elem) {
	echo "<a href=\"$elem[href]\">$elem[text]</a>";
}



// 4.  Модифицируйте предыдущую задачу так, чтобы получился следующий HTML код:

/*
<ul>
	<li><a href="1.html">ссылка 1</a></li>
	<li><a href="2.html">ссылка 2</a></li>
	<li><a href="3.html">ссылка 3</a></li>
</ul>
*/

echo "<ul>";
foreach($arr as $elem) {
	echo "<li><a href=\"$elem[href]\">$elem[text]</a></li>";
}
echo "</ul>";


//  5. Дан массив
	$arr = [
		['name'=>'Коля', 'age'=>30, 'salary'=>500],
		['name'=>'Вася', 'age'=>31, 'salary'=>600],
		['name'=>'Петя', 'age'=>32, 'salary'=>700],
	]; 

	// С помощью цикла сформируйте с его помощью следующий HTML код:

	/* 
	<table>
	<tr>
		<tr>
			<td>Коля</td>
			<td>30</td>
			<td>500</td>
		</tr>
		<tr>
			<td>Вася</td>
			<td>31</td>
			<td>600</td>
		</tr>
		<tr>
			<td>Петя</td>
			<td>32</td>
			<td>700</td>
		</tr>
	</tr>
</table>
	*/

	echo "<table>"; 
	echo "<tr>";
	foreach($arr as $elem) {
		echo "<tr> <td>$elem[name]</td> <td>$elem[age]</td> <td>$elem[salary]</td> </tr>";
	}
	echo "</tr>";
	echo "</table>";


	///////////////////
	////////////////////
	/////////////////////////
	echo "<hr>";




	//                                      Урок 24. Работа с GET запросами в PHP

// 1  Пусть с помощью GET-запроса отправляется число. Оно может быть или 1, или 2. 
// Сделайте так, чтобы если передано 1 - на экран вывелось слово 'привет', а если 2 - то слово 'пока'.


if( $_GET['num']  == 1 ) {
	echo 'привет';
} elseif ($_GET['num']  == 2) {
		echo 'пока';
	}




	// 2 вывод числа из массива

	echo "<hr>";

	$arr = ['a', 'b', 'c', 'd', 'e'];

	if(isset($arr[$_GET['get']])) {
	echo $arr[$_GET['get']];
	}


	// 3  Сделайте 3 ссылки. Пусть первая передает число 1, вторая - число 2, третья - число 3.
	// Сделайте так, чтобы по нажатию на ссылку на экран выводилось ее число.
	echo "<hr>";

	
?>
	<a href="?get=1">Link 1</a>
	<a href="?get=2">Link 2</a>
	<a href="?get=3">Link 3</a>

<?php
echo "<br>";

echo $_GET['get'];

echo "<hr>";


// 4  Сформируйте в цикле 10 ссылок. Пусть каждая ссылка передает свое число. Сделайте так,
//  чтобы по нажатию на ссылку на экран выводилось ее число.

for($i = 1; $i < 10; $i++) {
	echo "<a href=\"?get=$i\">Link $i</a> ";
}
echo "<br>";
echo $_GET['get'];

// 5  Модифицируйте предыдущую задачу так, чтобы каждая ссылка стояла в своем абзаце.


for($i = 1; $i <= 10; $i++) {
	echo "<p><a href=\"?get=$i\">Link $i</a></p> ";
}
echo "<br>";
echo $_GET['get'];


// 6.  Модифицируйте предыдущую задачу так, чтобы каждая ссылка стояла в своем li в теге ul
echo '<ul>';
for($i = 1; $i < 9; $i++) {
	echo "<li><a href=\"?get=$i\">Link $i</a></li> ";
}
echo '</ul>';
echo "<br>";
echo $_GET['get'];

echo "<hr>";
// 7. Дан массив. Сделайте так, чтобы с помощью GET-запроса можно было вывести любой элемент этого массива.


$arr = ['a', 'b', 'c', 'd', 'e', 'd']; // можно добавлять элементы в массив и они выведутся  на экран и всё будет работать

if(isset($_GET['get']) AND isset($arr[$_GET['get']])) { // если есть get и эдемент массива с этим номером
	echo $arr[$_GET['get']];
}
 echo "<br>";

 foreach($arr as $key => $elem) {
	 echo "<a href=\"?get=$key\">Link $elem</a> ";
 }
 echo "<hr>";



 //                         Урок 26 регулярные выражения PHP. Часть 1

 // 1. Дана строка 'ahb acb aeb aeeb adcb axeb'. Напишите регулярку,
 // которая найдет строки ahb, acb, aeb по шаблону: буква 'a', любой символ, буква 'b'.

 echo preg_replace('#a.b#', '!', 'ahb acb aeb aeeb adcb axeb')."<hr>";

 // 2. Дана строка 'aba aca aea abba adca abea'. Напишите регулярку, которая найдет 
 //строки abba adca abea по шаблону: буква 'a', 2 любых символа, буква 'a'. 

 echo preg_replace('#a..a#', '!', 'aba aca aea abba adca abea')."<hr>";

 // 3.  Дана строка 'aba aca aea abba adca abea'. Напишите регулярку, 
 // которая найдет строки abba и abea, не захватив adca.

 echo preg_replace('#ab.a#', '!', 'aba aca aea abba adca abea')."<hr>";

 // 4. Дана строка 'aa aba abba abbba abca abea'. Напишите регулярку, которая найдет строки 
 // aba, abba, abbba по шаблону: буква 'a', буква 'b' любое количество раз, буква 'a'. 

 echo preg_replace('#ab+a#', '!', 'aa aba abba abbba abca abea')."<hr>";

 // 5.  Дана строка 'aa aba abba abbba abca abea'. Напишите регулярку, 
 // которая найдет строки aa, aba, abba, abbba по шаблону: буква 'a', буква 'b' 
 // любое количество раз (в том числе ниодного раза), буква 'a'.

 echo preg_replace('#ab*a#', '!', 'aa aba abba abbba abca abea')."<hr>";

 // 6. Дана строка 'aa aba abba abbba abca abea'. Напишите регулярку, которая найдет строки aa,
 //  aba по шаблону: буква 'a', буква 'b' один раз или ниодного, буква 'a'.

 echo preg_replace('#ab?a#', '!', 'aa aba abba abbba abca abea')."<hr>";  // не получилось 

// 7. Дана строка 'ab abab abab abababab abea'. Напишите регулярку,
//  которая найдет строки по шаблону: строка 'ab' повторяется 1 или более раз

echo preg_replace('#(ab)+#', '!', 'ab abab abab abababab abea')."<hr>"; 

// 8.  Дана строка 'a.a aba aea'. Напишите регулярку, которая найдет строку a.a, не захватив остальные.

echo preg_replace('#a\.a#', '!', 'a.a aba aea')."<hr>"; 

// 9.  Дана строка '2+3 223 2223'. Напишите регулярку, которая найдет строку 2+3, не захватив остальные. 

echo preg_replace('#2\+3#', '!', '2+3 223 2223');

// 10.  Дана строка '23 2+3 2++3 2+++3 345 567'. Напишите регулярку,
// которая найдет строки 2+3, 2++3, 2+++3, не захватив остальные (+ может быть любое количество).

echo preg_replace('#2\++3#', '!', '23 2+3 2++3 2+++3 345 567');



// тема не понятная и нудна. Возможно если понадобится вернусь к ней





//                      Урок 30.  Работа с htaccess в PHP

 //                       Введение в htaccess

 //                       Основная информация в файле htaccess



//  #Redirect  - перенаправляет с одной страницы на другую. Можно направить на любой адрес сайта. 
//  #RewriteRule  - перенаправляет с одной страницы на другую. Можно направить на любой адрес сайта.  (В адресной стоке не меняется адрес) 

//  #Redirect /home-blog.php /https://webgrows.ru
//  #RewriteRule ^home-blog.php https://webgrows.ru

 #RewriteRule .+ test.php  - переводить на страницу при любом запросе

?>

 <!-- <meta http-equiv="refresh" content="2; url=https://webgrows.ru/">  --><!--  с помощью html переадресует страницу через 2 секудны-->


 <?php
echo "<h2>Получение данныех в карман htcaccess</h2>";

 $_SERVER['REQUEST_URI'];
 var_dump($_GET['get']);



 //                                                    Урок 31 файлы и папки

 // получение данных из файла и вывод на текущую страницу
echo '<h2>Файлы и папки</h2>';
 echo file_get_contents("style.css");
 echo '<hr>';

 // абсолютные и относительные пути

//Получение содеримого 
 Echo file_get_contents($_SERVER['DOCUMENT_ROOT']."/style.css").'<br>';

 // абсолютный путь к этому файлу
 echo $_SERVER['DOCUMENT_ROOT'].'<br>';
// путь к папке в которой файл
 echo __DIR__.'<br>';
// путь к самому файлу
 echo __FILE__.'<br>';


//         запись в файл 
//Пусть в корне вашего сайта лежит файл test.php.
//  Запишите в него текст '12345'.

file_put_contents('test.php', 'test.12345'."<br>");

//             Создание файла на PHP через file put contents
file_put_contents('test.txt', '!!!!!!!');  // если такого файла нет, то он просто создасться

// Дан массив с именами файлов ['1.txt', '2.txt', '3.txt'].
// Переберите его циклом и создайте файлы с такими именами 
// и пустым текстом.

$arr = ['1.txt', '2.txt', '3.txt'];

foreach ($arr as $elem) {
	file_put_contents($elem, 'Пустой текст'."<br>");
}
echo '<hr>';
// переименовывание файла в php

// rename('test.txt', 'testic.txt');



//       Проверка существования файла на PHP

var_dump(file_exists('test.php')); // возвращает true или false
echo '<hr>';
// Дан массив с именами файлов ['1.txt', '2.txt', '3.txt'].
// Переберите его циклом и проверьте каждый файл на существование. 
//Выведите на экран имя каждого файла и рядом текст "существует" или "не существует".

$arr = ['1.txt', '2.txt', '3.txt'];

foreach ($arr as $elem) {
	if (file_exists($elem) == true) {
		echo	$elem.' Существует'.'<br>';
	} else {
echo	file_exists($elem).' Не существует'.'<br>';
}
}
echo '<hr>';

 //              Чтение содержимого папки PHP с помощью scandir

 $files  = scandir('Scandir');
 var_dump($files);
 echo '<hr>';

 //             Рекурсивный обход вложенных папок PHP

 //  Доступ к папкам на всех уовнях влеженности
 // Получим все ФАЙЛЫ в виде массива на всех уровнях вложенности

 function getFiles($dir) {
$files = array_diff(scandir($dir), ['..'], ['.']);
$result = [];
	foreach ($files as $file) {
		$path = $dir .'/'.$file;
		if (is_dir($path)) {
			$result = array_merge($result, getFiles($path));
		} else {
			$result[] = $path;
		}
	}
	return $result;
 }

 var_dump(getFiles('Scandir')); // имя сканируемой папки

 echo "<hr>";
 
 echo "<h2>Сессии в php</h2>";

 	//Инициализируем сессию:

 		// Инициализировал в самом начале строки


	 //Выведем переменную test из сессии:
	echo $_SESSION['test'] = 'Тест!';
echo "<hr>";

	// Сделаем счетчик на сессиях
// Чтобы продемонстрировать работу с сессиями давайте реализуем счетчик количества обновления страницы пользователем.

// При каждом обновлении страницы он будет увеличиваться на единицу, 
// а при закрытии браузера - обнуляться (после закрытия нужно подождать 15-25 минут):

	//Инициализируем сессию:
	session_start();
	/*
		Переменная $_SESSION['counter'] будет нашим счетчиком.
		Если скрипт запускается первый раз -
		она будет пуста, присвоим ей единицу.
		Если не первый раз - тогда прибавим единицу.
	*/
	if (!isset($_SESSION['counter'])) {
		$_SESSION['counter'] = 1;
	} else {
		$_SESSION['counter'] = $_SESSION['counter'] + 1;
	}

	//Выведем значение счетчика:
	echo 'Вы обновили эту страницу '.$_SESSION['counter'].' раз!';

	/*
		Обновите страницу несколько раз,
		посмотрите на то, как увеличивается значение переменной.
		Затем закройте браузер, подождите полчаса и откройте снова -
		убедитесь в том, что переменная обнулилась!
	*/


	// удаление сессии  -  unset() 
		//После выполнения этой команды в $_SESSION['var'] станет null:
		unset($_SESSION['some_sesion']);
		echo "<hr>";

		// Завершение сессии  session_destroy()
//  Если же вам нужно удалить все переменные сессии для данного пользователя, то вместо unset 
// следует воспользоваться функцией session_destroy() (ее можно вызывать
//  только тогда, когда сессия запущена через session_start):

// //После выполнения этой команды ВСЕ переменные сессии станут null:  session_destroy();


//                                               Задачи

// Задача 1.   По заходу на страницу запишите в сессию текст 'test1'.
// Затем обновите страницу и выведите содержимое сессии на экран.
	 

//  не понял как сделать 


// 2.  Пусть у вас есть две страницы сайта. Запишите на первой странице что-нибудь в сессию, 
// а затем выведите это при заходе на другую страницу.
session_start();
$_SESSION['ses'] = 'Работаю с сессиями';
$sesion = $_SESSION['ses'];
file_put_contents('test.php', $sesion."<br>", FILE_APPEND);  // получилось!


// 3.  Сделайте две страницы: index.php и test.php. При заходе на index.php спросите 
// с помощью формы страну пользователя, запишите ее в сессию
//  (форма при этом должна отправится на эту же страницу).
//  Пусть затем пользователь зайдет на страницу test.php - выведите там страну пользователя.

echo "<h4>В какой стране вы живёте?</h4>"
 ?>
 <form action="">
 <input type="text" name="country1">
 <input type="submit">
 
 </form>
<?php
 if (isset($_REQUEST['country1'])) {
	$_SESSION['country'] = $_REQUEST['country1'];
	$country = $_SESSION['country'];
	file_put_contents('test.php', $country."<br>", FILE_APPEND).'<br>';  // FILE_APPEND  для того чтобы запись не перезаписывалась
 }

  // 4.  Спросите у пользователя email с помощью формы. Затем сделайте так, чтобы в другой форме
  //  (поля: имя, фамилия, пароль, email) при ее открытии поле email было автоматически заполнено.

  ?>

  <h2>Введите свой Email</h2>
  <form action="">
  <input type="text" name="email_ses">
  <input type="submit">
  </form>




  <?php
session_start();

 if (isset($_REQUEST['email_ses'])) {
	$_SESSION['email_ses'] = $_REQUEST['email_ses'];
	$email = $_SESSION['email_ses'];
 }
 
	?>

  <h2>Ваш Email</h2>
<form action="">
<input type="text" name="another" value= " <?= $_REQUEST['email_ses']; ?>">
	<input type="submit">
	</form>

	<?php


//                       Работа с cookie на PHP

// Все куки в начале страницы

			//Выведем на экран значение куки test:
	//	echo $_COOKIE['test'];



// Урок 34	                                Работа с базами данных SQL в PHP для новичков
echo "<pre>"; // открыл на всю страницу


error_reporting(E_ALL);
ini_set('display_errors', 'on');

$host = 'localhost';
$user = 'root';
$password = 'root';
$dbname = 'test';

$link = mysqli_connect($host, $user, $password, $dbname)
   or die(mysqli_error($link));

   mysqli_query($link, "SET NAMES 'utf8'");
  
   /*

   $query = "SELECT * FROM users WHERE id > 0";
   $result = mysqli_query($link, $query) or die(mysqli_error($link));

   var_dump($result);

   echo "<hr>";

   $one_user = mysqli_fetch_assoc($result);
   var_dump($one_user); // вывести первую строку в таблице

   $one_user = mysqli_fetch_assoc($result);  // то же самое повторяю
   var_dump($one_user); // вывести вторую строку в таблице
   


   // получим все строки из базы
   for ($data = []; $row = mysqli_fetch_assoc($result); $data[] = $row);
   var_dump($data);

*/


   // 	//Формируем тестовый запрос к новой таблице :
		$query = "SELECT * FROM workers WHERE id > 0";

		//Делаем запрос к БД, результат запроса пишем в $result:
			$result = mysqli_query($link, $query) or die(mysqli_error($link));

				//Преобразуем то, что отдала нам база в нормальный массив PHP $data:
		for ($data = []; $row = mysqli_fetch_assoc($result); $data[] = $row);
		


		// Добавим в таблицу пользователя

		$query = "INSERT INTO workers SET name='Гена', age=30, salary=1000"; // доступ к серверу

		$query = "SELECT  FROM workers WHERE id > 0";  // нужно выбрать обновлённую таблицу

		$query = "DELETE  FROM workers WHERE id>8";  // удаление


		//                       задачи на запросы 



	//	$query = "INSERT INTO workers (name, age, salary)
	//	VALUES ('Ярослава ',30 , 1200), ('Петра ', 31, 1000)";

    //    $query = "DELETE  FROM workers WHERE name='Коля'";  // удаление
	//	$query = "UPDATE workers SET salary=200 WHERE name='Вася'";


			//В $data строки будут отсортированы по возрасту от меньшего к большему:
//	$query = "SELECT * FROM workers WHERE id>0 ORDER BY age";

			//В $data строки будут отсортированы по возрасту от большего к меньшего:
//	$query = "SELECT * FROM workers WHERE id>0 ORDER BY age DESC";

	//В $data будет только две первых строки:
	//$query = "SELECT * FROM workers WHERE id>0 LIMIT 2";

		//В $data будут строки со второй, пять штук:
	//	$query = "SELECT * FROM workers WHERE id>0 LIMIT 2,5";

		//В $data будут строки со вторую, 5 штук, отсортированные по убыванию id
	//	$query = "SELECT * FROM workers WHERE id>0 ORDER BY id DESC LIMIT 2,5";

		//ВЫБРАТЬ все ИЗ таблицы ГДЕ имя ПОДОБНО любой_строке_заканчивающейся_на_я
	//	$query = "SELECT * FROM workers WHERE name LIKE '%я'";
		/*
			Результатом будет Петя, Вася и Коля
			(если они еще уцелели после урока с DELETE).
		*/

	//	$query = "SELECT * FROM workers WHERE id>0 ORDER BY age  LIMIT 2,6";




	//                       Практика по работе с базами данных
?>
</pre>
	<table>
	<tr>
		<th>id</th>
		<th>name</th>
		<th>age</th>
		<th>salary</th>
		<th>delete</th>
	</tr>
	<?php

if (isset($_GET['del'])) {
	$delete = $_GET['del']; // получим id для удаления
	$query = "DELETE FROM workers WHERE id=$delete"; // сформируем запрос на удаление
	mysqli_query($link, $query) or die(mysqli_error($link)); // удалим
	}

		$query = "SELECT * FROM workers";
		$result = mysqli_query($link, $query) or die(mysqli_error($link));  //доступ к серверу
	for ($data = []; $row = mysqli_fetch_assoc($result); $data[] = $row);
		var_dump($data); 

		// Давайте переберем полученый массив циклом foreach, сформировав при этом tr-ки и td-шки
		$result = '';
		
		foreach ($data as $elem) {
			$result .= '<tr>';
			
			$result .= '<td>' . $elem['id'] . '</td>';
			$result .= '<td>' . $elem['name'] . '</td>';
			$result .= '<td>' . $elem['age'] . '</td>';
			$result .= '<td>' . $elem['salary'] . '</td>';
			
			$result .= '<td><a href="?del=' . $elem['id'] . '">удалить</a></td>';
			$result .= '</tr>';
		}
		echo "<h2>Моя первая таблица, полученая из базы данных</h2>";
		echo $result;
	?>
</table>




<!--Давайте теперь сделаем добавление нового работника с помощью формы.

Давайте сделаем HTML код формы добавления:-->
<?php
function inputSQL($name)
	{
		if (isset($_POST[$name])) {
			$value = $_POST[$name];
		} else {
			$value = '';
		}
		
		return '<input name="' . $name . '" value="' . $value .'">';
	}

	if (!empty($_POST)) {
		$name = $_POST['name'];
		$age = $_POST['age'];
		$salary = $_POST['salary'];
		
		$query = "INSERT INTO workers SET name='$name', age='$age', salary='$salary'";
		mysqli_query($link, $query) or die(mysqli_error($link));
	}
?>
<form action="" method="POST">
	<p>Имя<?php echo inputSQL('name'); ?></p>
	<p>	Возраст<?php echo inputSQL('age'); ?></p>
	<p>Зарплата	<?php echo inputSQL('salary'); ?></p>
	<p>	<?php
	if (!empty($_POST['name'])) {
		echo 'Вы добавили работника: '.$_POST['name'];
	}
	?> </p>
	<input type="submit" value="добавить работника">
</form>







